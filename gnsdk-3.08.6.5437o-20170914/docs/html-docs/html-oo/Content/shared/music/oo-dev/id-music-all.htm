<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="_Skins_HTML5___Top_Navigation" data-mc-search-type="Stem" data-mc-help-system-file-name="index.xml" data-mc-path-to-help-system="../../../../" data-mc-has-content-body="True" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Identifying Music Using a CD-TOC, Text, or Fingerprints (MusicID)</title>
        <link href="../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" />
        <link href="../../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" />
        <link href="../../../../Skins/Fluid/Stylesheets/foundation.6.2.3.css" rel="stylesheet" />
        <link href="../../../../Skins/Fluid/Stylesheets/Styles.css" rel="stylesheet" />
        <link href="../../../../Skins/Fluid/Stylesheets/Tablet.css" rel="stylesheet" />
        <link href="../../../../Skins/Fluid/Stylesheets/Mobile.css" rel="stylesheet" />
        <link href="https://cloud.typography.com/7045754/7789972/css/fonts.css" rel="stylesheet" />
        <style>/*&lt;meta /&gt;*/

.button.next-topic-button
{
	-pie-background: url('../../../../Skins/Default/Stylesheets/Images/navigate-next.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.previous-topic-button
{
	-pie-background: url('../../../../Skins/Default/Stylesheets/Images/navigate-previous.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.separator-button
{
	-pie-background: linear-gradient(#ffffff, #ececec);
}

.button.remove-highlight-button
{
	-pie-background: url('../../../../Skins/Default/Stylesheets/Images/highlight.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.separator-button
{
	-pie-background: linear-gradient(#ffffff, #ececec);
}

.button.expand-all-button
{
	-pie-background: url('../../../../Skins/Default/Stylesheets/Images/expand.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.separator-button
{
	-pie-background: linear-gradient(#ffffff, #ececec);
}

.button.print-button
{
	-pie-background: url('../../../../Skins/Default/Stylesheets/Images/printer.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.collapse-all-button
{
	-pie-background: url('../../../../Skins/Default/Stylesheets/Images/collapse.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.needs-pie
{
	behavior: url('../../../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
        <link href="../../../Resources/Stylesheets/MainStyles.css" rel="stylesheet" />
        <script src="https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js">
        </script>
        <script src="../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../Resources/Scripts/foundation.6.2.3_custom.js">
        </script>
        <script src="../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="foundation-wrap off-canvas-wrapper">
            <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
                <aside class="off-canvas position-right" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
                    <ul class="off-canvas-drilldown vertical menu off-canvas-list" data-drilldown="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-drilldown-submenu-parent" data-mc-css-tree-node-collapsed="is-drilldown-submenu-parent" data-mc-css-sub-menu="vertical menu slide-in-right is-drilldown-submenu" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="True" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.drilldown" data-mc-toc="True">
                    </ul>
                </aside>
                <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
                    <div>
                        <nav class="title-bar tab-bar" data-mc-ignore="true">
                            <div class="middle title-bar-section outer-row clearfix">
                                <div class="relative clearfix"><a class="logo" href="../../../landing-page/gnsdk-home.htm" alt="Logo"></a>
                                    <div class="navigation-wrapper nocontent">
                                        <ul class="navigation clearfix" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="1" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                            <li class="placeholder" style="visibility:hidden"><a>placeholder</a>
                                            </li>
                                        </ul>
                                    </div>
                                    <button class="menu-icon" data-toggle="offCanvas"><span></span>
                                    </button>
                                </div>
                            </div>
                            <div class="nav-search row outer-row">
                                <form class="search" action="#">
                                    <div class="search-bar search-bar-container needs-pie">
                                        <input class="search-field needs-pie" type="search" placeholder="Search" />
                                        <div class="search-filter-wrapper">
                                            <div class="search-filter">
                                                <div class="search-filter-content">
                                                    <ul>
                                                        <li>All Files</li>
                                                    </ul>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="search-submit-wrapper" dir="ltr">
                                            <div class="search-submit" title="Search">
                                            </div>
                                        </div>
                                    </div>
                                </form>
                            </div>
                        </nav>
                    </div>
                    <section class="main-section">
                        <div class="row outer-row" data-mc-content-body="True">
                            <p style="font-weight: bold;"><span class="GeneralProductNameFull">GNSDK</span> <span class="GeneralAPI">OO APIs</span></p>
                            <p>Version 3.08.6.5437 : <span class="SystemShortDate">9/14/2017</span></p>
                            <hr width="100%" size="0" align="center" />
                            <div class="content">
                                <div id="contentBody">
                                    <div class="row collapse">
                                        <div class="sideContent">
                                            <div class="clearfix">
                                                <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolBar mc-component nocontent">
                                                    <div class="button-group-container-left">
                                                        <button class="button needs-pie next-topic-button" title="Navigate next">
                                                            <img src="../../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="next topic" />
                                                        </button>
                                                        <button class="button needs-pie previous-topic-button" title="Navigate previous">
                                                            <img src="../../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="previous topic" />
                                                        </button>
                                                        <div class="button-separator">
                                                        </div>
                                                        <button class="button needs-pie remove-highlight-button" title="Remove Highlights">
                                                            <img src="../../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="remove highlight" />
                                                        </button>
                                                        <div class="button-separator">
                                                        </div>
                                                        <button class="button needs-pie expand-all-button" data-state1-class="expand-all-button" data-state2-class="collapse-all-button" data-state2-title="Collapse all" title="Expand all" data-state1-title="Expand all">
                                                            <img src="../../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="expand all" />
                                                        </button>
                                                        <div class="button-separator">
                                                        </div>
                                                        <button class="button needs-pie print-button" title="Print">
                                                            <img src="../../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="print" />
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                            <ul class="nocontent menu _Skins_SideMenu mc-component" data-mc-is-context-sensitive="True" data-mc-linked-toc="Data/Tocs/gnsdk__gnsdk_oo_all.js" data-mc-side-menu="True" data-mc-max-depth="4" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                            </ul>
                                        </div>
                                        <div class="nocontent">
                                            <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="3" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">You are here: </span>
                                            </div>
                                        </div>
                                        <h1><a name="kanchor581"></a><a name="kanchor582"></a><a name="kanchor583"></a>Identifying Music Using a CD-TOC, Text, or Fingerprints (MusicID)</h1>
                                        <p><a name="kanchor584"></a>The MusicID module is the GNSDK component that handles recognition of non-streaming music though a CD TOC, audio source, fingerprint or search text. MusicID is implemented using the <code class="prettyprint">GnMusicId</code><a name="kanchor585"></a> class. The MusicID-File module is the GNSDK component that handles audio file recognition, implemented through the <code class="prettyprint">GnMusicIdFile</code> class. For information on identifying audio files and using the  <code class="prettyprint">GnMusicIdFile</code> class, see <a href="musicid-file.htm" class="MCXref xref" xrefformat="{para}">Identifying Audio Files (MusicID-File)</a>. </p>
                                        <p class="note" data-mc-autonum="&lt;b&gt;&lt;span style=&quot;color: #e31b23;&quot; class=&quot;mcFormatColor&quot;&gt;Note: &lt;/span&gt;&lt;/b&gt;"><span class="autonumber"><span><b><span style="color: #e31b23;" class="mcFormatColor">Note: </span></b></span></span><a name="kanchor586"></a>You must be licensed to use MusicID. Contact your Gracenote support representative with questions about product licensing and entitlement.</p>
                                        <h3>MusicID Queries</h3>
                                        <p>The <code class="prettyprint">GnMusicId</code> class provides the following query methods:</p>
                                        <ul>
                                            <li value="1"><code class="prettyprint"><b>FindAlbums</b></code>—Call this with an album or track identifier such as a CD TOC string, an audio source, a fingerprint, or identifying text (album title, track title, artist name, track artist name or composer name). This method returns a <code class="prettyprint">GnResponseAlbums</code> object for each matching album.</li>
                                            <li value="2"><code class="prettyprint"><b>FindMatches</b></code>—Call this method with identifying text.  The method returns a <code class="prettyprint">GnResponseDataMatches</code> object for each match, which could identify an album or a contributor.</li>
                                        </ul>
                                        <p><b>Notes:</b>
                                        </p>
                                        <ul>
                                            <li value="1">A <code class="prettyprint">GnMusicId</code> object's life time is scoped to a single recognition event and your application should create a new one for each event. </li>
                                            <li value="2">During a recognition event, status events can be received via a delegate object that implements <code class="prettyprint">IGnStatusEvents</code> (<code class="prettyprint">GnStatusEventsDelegate</code> in Objective-C). </li>
                                            <li value="3">A recognition event can be cancelled by the <code class="prettyprint">GnMusicId</code> cancel method or by the "canceller" provided in each events delegate method. </li>
                                            <li value="4"><code class="prettyprint">GnMusicId</code> recognition events are performed synchronously, with the response object
returned to your application.</li>
                                        </ul>
                                        <h3>Options for MusicID Queries</h3>
                                        <p>The <code class="prettyprint">GnMusicId</code>'s <code class="prettyprint">Options</code> class allows you to set the following options:</p>
                                        <ul>
                                            <li value="1"><code class="prettyprint"><b>AudioSuitabilityProcessing</b></code>—Indicates whether <code class="prettyprint">GnMusicId</code> should evaluate audio as being suitable for query processing. You can check suitability before making a query using a <code>GnMusicId</code> <code>infoGet</code> method call:<p><b>Java</b></p><pre>GnString suitable = mid.infoGet(GnMusicIdInfo.kInfoSuitableForQuery); /* Returns 'true' or 'false' */</pre><p class="note" data-mc-autonum="&lt;b&gt;&lt;span style=&quot;color: #e31b23;&quot; class=&quot;mcFormatColor&quot;&gt;Note: &lt;/span&gt;&lt;/b&gt;"><span class="autonumber"><span><b><span style="color: #e31b23;" class="mcFormatColor">Note: </span></b></span></span>There are other options available that can give you finer control over defining, controlling, and assessing suitability. To implement this, you should talk to your Gracenote customer representative.</p></li>
                                            <li value="2"><code class="prettyprint"><b>LookupData</b></code>—Set <code class="prettyprint">GnLookupData</code> options to enable what data can be returned, for example, classical data, mood and tempo data, playlist, external IDs, and so on.</li>
                                            <li value="3"><code class="prettyprint"><b>LookupMode</b></code>—Set a lookup option with one of the <code class="prettyprint">GnLookupMode</code> enums. These include ones for local only, online only, online nocache, and so on.</li>
                                            <li value="4"><code class="prettyprint"><b>PreferResultLanguage</b></code>—Use one of the <code class="prettyprint">GnLanguage</code> enums to set the preferred language for results.</li>
                                            <li value="5"><code class="prettyprint"><b>PreferResultExternalId</b></code>—Set external ID for results from external provider. External IDs are 3rd party IDs used to cross link this metadata to 3rd party services.</li>
                                            <li value="6"><code class="prettyprint"><b>PreferResultCoverart</b></code>—Specifies preference for results that have cover art associated.</li>
                                            <li value="7"><code class="prettyprint"><b>ResultSingle</b></code>—Specifies whether a response must return only the single best result. Default is <code class="prettyprint">true</code>.</li>
                                            <li value="8"><code class="prettyprint"><b>ResultRangeStart</b></code>— Specifies result range start value.</li>
                                            <li value="9"><code class="prettyprint"><b>ResultCount</b></code>— Specifies maximum number of returned results.</li>
                                        </ul>
                                        <h3>Identifying Music Using a CD TOC</h3>
                                        <p>MusicID-CD is the component of GNSDK that handles recognition of audio CDs and delivery of information including artist, title, and track names. The application provides GNSDK with the TOC from an audio CD and MusicID-CD will identify the CD and provide album and track information.</p>
                                        <p><b>To identify music using a CD-TOC:</b>
                                        </p>
                                        <ul>
                                            <li value="1"><a name="kanchor587"></a>Instantiate a <code class="prettyprint">GnMusicId</code> object with your user handle.</li>
                                            <li value="2">Set a string with your TOC values</li>
                                            <li value="3">Call the <code class="prettyprint">GnMusicId</code>'s <code class="prettyprint">FindAlbums</code> method with your TOC string.</li>
                                            <li value="4">Process the <code class="prettyprint">GnResponseAlbum</code> metadata result objects returned.</li>
                                        </ul>
                                        <p><a name="kanchor588"></a><a name="kanchor589"></a><a name="kanchor590"></a>The code samples below illustrates a simple TOC lookup for local and online systems. The code for the local and online lookups is the same, except for two areas. If you are performing a local lookup, you must initialize the SQLite and Local Lookup libraries, in addition to the other GNSDK libraries:</p>
                                        <div class="MCDropDown MCDropDown_Open dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../../../Skins/Default/Stylesheets/Images/transparent.gif" height="15" width="16" alt="Closed" data-mc-alt2="Open" /><b>C++</b></a></span>
                                            <div class="MCDropDownBody dropDownBody"><pre class="prettyprint">gnsdk_cstr_t toc= "150 14112 25007 41402 54705 69572 87335 98945 112902 131902 144055 157985 176900 189260 203342";
GnMusicId music_id(user);

music_id.Options().LookupData(kLookupDataContent);
GnResponseAlbums response = music_id.FindAlbums(toc);
</pre>
                                            </div>
                                        </div>
                                        <div class="MCDropDown MCDropDown_Open dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage" name="kanchor591"><img class="MCDropDown_Image_Icon" src="../../../../Skins/Default/Stylesheets/Images/transparent.gif" height="15" width="16" alt="Closed" data-mc-alt2="Open" /><b>Java and Android Java</b></a></span>
                                            <div class="MCDropDownBody dropDownBody"><pre class="prettyprint">GnMusicId GnMusicId = new GnMusicId(user);
String toc = "150 14112 25007 41402 54705 69572 87335 98945 112902 131902 144055 157985 176900 189260 203342";
GnResponseAlbums responseAlbums = GnMusicId.findAlbums(toc);</pre>
                                            </div>
                                        </div>
                                        <div class="MCDropDown MCDropDown_Open dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../../../Skins/Default/Stylesheets/Images/transparent.gif" height="15" width="16" alt="Closed" data-mc-alt2="Open" />Objective-C
        </a></span>
                                            <div class="MCDropDownBody dropDownBody"><pre class="prettyprint">NSString*   toc = @"150 14112 25007 41402 54705 69572 87335 98945 112902 131902 144055 157985 176900 189260 203342";
    
NSLog(@"\n*****MusicID TOC Query*****\n");
    
NSError *error = nil;
/*LookupStatusEvents statusEvents;*/
GnMusicId* musicid = [[GnMusicId alloc] initWithUser:user statusEventsDelegate:[[MusicIDLookupAlbumTOCEvent alloc]init] error:nil];
    
[[musicid options] lookupData:kLookupDataContent bEnable:YES error:&amp;error];
GnResponseAlbums *response = [musicid findAlbumsWithCDTOC:toc
                                  error:&amp;error];</pre>
                                            </div>
                                        </div>
                                        <div class="MCDropDown MCDropDown_Open dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage" name="kanchor592"><img class="MCDropDown_Image_Icon" src="../../../../Skins/Default/Stylesheets/Images/transparent.gif" height="15" width="16" alt="Closed" data-mc-alt2="Open" /><b>C# and Windows Phone C#</b></a></span>
                                            <div class="MCDropDownBody dropDownBody"><pre class="prettyprint">string toc = "150 14112 25007 41402 54705 69572 87335 98945 112902 131902 144055 157985 176900 189260 203342";
try
{
  using (GnStatusEventsDelegate midEvents = new MusicIdEvents())
  {
     GnMusicId GnMusicId = new GnMusicId(user, midEvents);
     GnResponseAlbums gnResponse = GnMusicId.FindAlbums(toc);
  }
}</pre>
                                            </div>
                                        </div>
                                        <h3>Identifying Music Using Text</h3>
                                        <p>Using the GNSDK's MusicID module, your application can identify music using a lookup based on text strings. Besides user-inputted text, text strings can be extracted from an audio track’s file path name and from text data embedded within a file, such as mp3 tags. You can provide the following types of input strings:</p>
                                        <ul>
                                            <li value="1">Album title</li>
                                            <li value="2"><a name="kanchor594"></a>Track title</li>
                                            <li value="3">Album artist</li>
                                            <li value="4">Track artist</li>
                                            <li value="5">Track composer</li>
                                        </ul>
                                        <p>Text-based lookup attempts to match these attributes with known albums, artists, and composers. The text lookup first tries to match an album. If that is not possible, it next tries to match an artist. If that does not succeed, a composer match is tried. Adding as many input strings as possible to the lookup improves the results.</p>
                                        <p>Text-based lookup returns “best-fit” objects, which means that depending on what your input text matched, you might get back album matches or contributor matches.</p>
                                        <p>Identifying music using text is done using the <code class="prettyprint">GnMusicId</code> class that has numerous methods for finding albums, tracks, and matches</p>
                                        <p><b>To identify music using text:</b>
                                        </p>
                                        <ol>
                                            <li value="1">Code an events handler object callbacks for status events (optional).</li>
                                            <li value="2">Instantiate a <code class="prettyprint">GnMusicId</code> object with your User object and events handler object. Note that the events handler is optional. </li>
                                            <li value="3">Call the <code class="prettyprint">GnMusicId</code>'s <code class="prettyprint">FindAlbums</code> method with your text search string(s).</li>
                                            <li value="4">Process metadata results returned</li>
                                        </ol>
                                        <div class="MCDropDown MCDropDown_Open dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../../../Skins/Default/Stylesheets/Images/transparent.gif" height="15" width="16" alt="Closed" data-mc-alt2="Open" /><b>C++</b></a></span>
                                            <div class="MCDropDownBody dropDownBody"><pre class="prettyprint">/* Set the input text as album title, artist name, track title and perform the query */
GnResponseAlbums response = music_id.FindAlbums("Supernatural", "Africa Bamba", "Santana", GNSDK_NULL, GNSDK_NULL);
        </pre>
                                            </div>
                                        </div>
                                        <div class="MCDropDown MCDropDown_Open dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../../../Skins/Default/Stylesheets/Images/transparent.gif" height="15" width="16" alt="Closed" data-mc-alt2="Open" /><b>Android Java and Java</b></a></span>
                                            <div class="MCDropDownBody dropDownBody"><pre class="prettyprint">GnMusicId musicId = new GnMusicId( gnUser, new StatusEvents() );
GnResponseAlbums result = musicId.findAlbums( album, track, artist, null, null );</pre>
                                            </div>
                                        </div>
                                        <div class="MCDropDown MCDropDown_Open dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../../../Skins/Default/Stylesheets/Images/transparent.gif" height="15" width="16" alt="Closed" data-mc-alt2="Open" />Objective-C
        </a></span>
                                            <div class="MCDropDownBody dropDownBody"><pre class="prettyprint">
musicId = [[GnMusicId alloc] initWithGnUser: self.gnUser statusEventsDelegate: self];

[self.cancellableObjects addObject: musicId];

[[musicId options] lookupData:kLookupDataContent bEnable:YES error:&amp;amp;error];

self.queryBeginTimeInterval = [[NSDate date] timeIntervalSince1970];

[self enableOrDisableControls:NO];

dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0), ^{
     NSError *textSearchOperationError = nil;
     GnResponseAlbums *responseAlbums = [musicId findAlbumsWithAlbumTitle: albumTitle
                           trackTitle: trackTitle
                           albumArtistName: artistName
                           trackArtistName: artistName
                           composerName: nil
                           error: &amp;amp;textSearchOperationError];
    });
}</pre>
                                            </div>
                                        </div>
                                        <div class="MCDropDown MCDropDown_Open dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../../../Skins/Default/Stylesheets/Images/transparent.gif" height="15" width="16" alt="Closed" data-mc-alt2="Open" /><b>C# and Windows Phone C#</b></a></span>
                                            <div class="MCDropDownBody dropDownBody"><pre class="prettyprint">/* Set the input text as album title, artist name, track title and perfor the query */
GnResponseAlbums gnResponse = musicID.FindAlbums("Supernatural", "Africa Bamba", "Santana");</pre>
                                            </div>
                                        </div>
                                        <h3>Identifying Music Using Fingerprints</h3>
                                        <p><a name="kanchor595"></a><a name="kanchor596"></a>You can identify music using an audio fingerprint. An audio fingerprint is data that uniquely identifies an audio track based on the audio waveform. You can use MusicID or MusicID-File to identify music using an audio fingerprint. The online Gracenote Media Service uses audio fingerprints to match the audio from a client application to the Gracenote Music Database. For more information, see <i>Fingerprint-Based Recognition</i>.</p>
                                        <p> Generating fingerprints is preferred when a device cannot immediately perform recognition, perhaps because it is temporarily disconnected from the Internet, and wishes to do so later. Fingerprint data is much smaller that raw audio, putting less demand on storage resources.</p>
                                        <h4><a name="kanchor597"></a>PCM Audio Format Recommendations</h4>
                                        <p>GNSDK fingerprinting supports the following PCM audio formats:</p>
                                        <ul>
                                            <li value="1"><b>Sample Sizes</b>—16-bit</li>
                                            <li value="2"><b>Channels</b>—1 or 2 (mono or stereo)</li>
                                            <li value="3"><b>Sample Rates</b>—11025 Hz, 16000 Hz, 22050 Hz, 24000 Hz, 32000 Hz, 44100 Hz, 48000 Hz</li>
                                        </ul>
                                        <p>Applications should use the highest quality audio possible to ensure the best results. Lower quality audio will result in less accurate fingerprint matches. Gracenote recommends at least 16-bit, stereo, 22050 Hz.</p>
                                        <p class="warning">Do not resample or downsample audio to target these frequencies. Send the best quality audio that you have available.</p>
                                        <h4>MusicID Fingerprinting</h4>
                                        <p>The MusicID fingerprinting APIs give your application the ability to provide audio data as an identification mechanism. Note that if you want to do recognition using fingerprints and metadata together, and possibily have many files to do at once, then MusicID-File fingerprinting is probably the better solution. See <i><a href="musicid-file.htm">Identifying Audio Files</a></i></p>
                                        <p>There are four <code class="prettyprint">GnMusicId</code> fingerprinting methods:</p>
                                        <ul>
                                            <li value="1"><code class="prettyprint"><b>FingerprintFromSource</b></code>—Generates a fingerprint from a provided audio source. <b>Gracenote recommends using this</b>, as it encapsulates the below three calls (and additionally required code) into one.</li>
                                            <li value="2"><code class="prettyprint"><b>FingerprintBegin</b></code><a name="kanchor598"></a>—Initialize fingerprint generation.</li>
                                            <li value="3"><code class="prettyprint"><b>FingerprintWrite</b></code>—Provides uncompressed audio data for fingerprint generation. You can call this after <code class="prettyprint">FingerprintBegin</code> to generate a native Gracenote Fingerprint Extraction (GNFPX) or Cantametrix (CMX) fingerprint.</li>
                                            <li value="4"><code class="prettyprint"><b>FingerprintEnd</b></code>—Finalizes fingerprint generation. </li>
                                        </ul>
                                        <p>Identifying music using MusicID fingerprinting examples:</p>
                                        <div class="MCDropDown MCDropDown_Open dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../../../Skins/Default/Stylesheets/Images/transparent.gif" height="15" width="16" alt="Closed" data-mc-alt2="Open" /><b>C++</b></a></span>
                                            <div class="MCDropDownBody dropDownBody"><pre class="prettyprint">/*-----------------------------------------------------------------------------
 *  GatherFingerprint
 */
virtual void
GatherFingerprint(GnMusicIdFileInfo&amp; fileInfo, gnsdk_uint32_t currentFile, gnsdk_uint32_t totalFiles, IGnCancellable&amp; canceller)
{
  char     pcmAudio[2048] = {0};
  gnsdk_bool_t complete     = GNSDK_FALSE;
  gnsdk_cstr_t file;

  GNSDK_UNUSED(currentFile);
  GNSDK_UNUSED(totalFiles);
  GNSDK_UNUSED(canceller);

   try
   {
      file = fileInfo.FileName();

      std::ifstream audioFile(file, std::ios::in | std::ios::binary);
      if ( audioFile.is_open() )
      {
        /* skip the wave header (first 44 bytes). the format of the sample files is known,
         * but please be aware that many wav file headers are larger then 44 bytes!
         */
         audioFile.seekg(44);
         if ( audioFile.good() )
         {
           /* initialize the fingerprinter
          * Note: The sample files are non-standard 11025 Hz 16-bit mono to save on file size
          */
          fileInfo.FingerprintBegin(11025, 16, 1);

          do
          {
            audioFile.read(pcmAudio, 2048);
            complete = fileInfo.FingerprintWrite(
              (gnsdk_byte_t*)pcmAudio,
              (gnsdk_size_t)audioFile.gcount()
             );

            /* does the fingerprinter have enough audio? */
            if (GNSDK_TRUE == complete)
            {
              break;
            }
          }
          while ( audioFile.good() );

          if (GNSDK_TRUE != complete)
          {
             /* Fingerprinter doesn't have enough data to generate a fingerprint.
              Note that the sample data does include one track that is too short to fingerprint. */
            std::cout &lt;&lt; "Warning: input file does contain enough data to generate a fingerprint:\n" &lt;&lt; file &lt;&lt;"\n";
            fileInfo.FingerprintEnd();
          }
        }
        else
        {
          std::cout &lt;&lt; "\n\nError: Failed to skip wav file header: " &lt;&lt; file &lt;&lt;"\n\n";
        }
      }
      else
      {
        std::cout &lt;&lt; "\n\nError: Failed to open input file: " &lt;&lt; file &lt;&lt; "\n\n";
      }
    }
    catch (GnError&amp; e)
    {
      std::cout &lt;&lt; e.ErrorAPI() &lt;&lt; "\t" &lt;&lt; std::hex &lt;&lt; e.ErrorCode() &lt;&lt; "\t" &lt;&lt;  e.ErrorDescription() &lt;&lt; std::endl;
   }
}</pre>
                                            </div>
                                        </div>
                                        <div class="MCDropDown MCDropDown_Open dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../../../Skins/Default/Stylesheets/Images/transparent.gif" height="15" width="16" alt="Closed" data-mc-alt2="Open" />Java
        </a></span>
                                            <div class="MCDropDownBody dropDownBody"><pre class="prettyprint">@Override 
public void
gatherFingerprint( GnMusicIdFileInfo fileInfo, long currentFile, long totalFiles, IGnCancellable canceller) {
      
  boolean complete = false;
    
  try {
        
      File audioFile = new File( fileInfo.fileName() );
        
      if (audioFile.exists()) {
          
        FileInputStream audioFileInputStream = null;
        DataInputStream audioDataInputStream = null;
  
        audioFileInputStream = new FileInputStream(audioFile);
          
        // skip the wave header (first 44 bytes). the format of the sample files is known,
        // but please be aware that many wav file headers are larger then 44 bytes!
         audioFileInputStream.skip(44);

         // initialize the fingerprinter
         // Note: The sample files are non-standard 11025 Hz 16-bit mono to save on file size
        fileInfo.fingerprintBegin(11025, 16, 1);
          
        audioDataInputStream = new DataInputStream(audioFileInputStream);

        byte[] audioBuffer = new byte[BUFFER_READ_SIZE];
        int readSize = 0;
        do {

           // read data, check for -1 to see if we are at end of file
           readSize = audioDataInputStream.read( audioBuffer );
           if ( readSize == -1) {
              break;
           }
            
           complete = fileInfo.fingerprintWrite( audioBuffer, readSize );
            
           // does the fingerprinter have enough audio?
           if (complete) {
              break;
           }
            
         }
         while ( (readSize &gt; 0) &amp;&amp; (complete == false) );
          
         audioDataInputStream.close();
          
         fileInfo.fingerprintEnd();
          
         if (!complete){
            // Fingerprinter doesn't have enough data to generate a fingerprint.
            // Note that the sample data does include one track that is too short to fingerprint.
            System.out.println("Warning: input file does not contain enough data to generate a fingerprint:\n" + audioFile.getPath());
         }
          
      }
        
    } catch ( GnException gnException ) {
        System.out.println("GnException \t" + gnException.getMessage());
    } catch ( IOException e ){
        System.out.println( "Execption reading audio file" + e.getMessage() );
  }      
}</pre>
                                            </div>
                                        </div>
                                        <div class="MCDropDown MCDropDown_Open dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../../../Skins/Default/Stylesheets/Images/transparent.gif" height="15" width="16" alt="Closed" data-mc-alt2="Open" />Objective-C
        </a></span>
                                            <div class="MCDropDownBody dropDownBody"><pre class="prettyprint">-(void) gatherFingerprint: (GnMusicIdFileInfo*)fileInfo currentFile: (NSUInteger)currentFile totalFiles: (NSUInteger)totalFiles cancellableDelegate: (id &lt;GnCancellableDelegate&gt;)canceller
{
  (void)currentFile;
  (void)totalFiles;
  (void)canceller;

  NSString* file = [fileInfo fileName:nil];
  bool complete = false;

  if( file )
  {

    NSFileHandle *fileHandle = [NSFileHandle fileHandleForReadingAtPath:file];
    if( fileHandle != nil )
    {
      /* skip the wave header (first 44 bytes). the format of the sample files is known,
       * but please be aware that many wav file headers are larger then 44 bytes!
       */
      unsigned long long offset = 44;
      [fileHandle seekToFileOffset:offset];

      /* initialize the fingerprinter
       * Note: The sample files are non-standard 11025 Hz 16-bit mono to save on file size
       */
      [fileInfo fingerprintBegin:11025 audioSampleSize:16 audioChannels:1 error:nil];

      NSData* fileData = nil;
      do
      {
        fileData = [fileHandle readDataOfLength:2048];
        if( nil != [fileData bytes])
        {
          complete = [fileInfo fingerprintWrite:[fileData bytes] audioDataSize:2048 error:nil];

          if( complete )
          {
            break;
          }
        }

      }
      while ( nil != [fileData bytes] );

      if ( false == complete )
      {
        NSLog(@"Warning: input file does contain enough data to generate a fingerprint:%@",file);
      }

      [fileInfo fingerprintEnd:nil];

      [fileHandle closeFile];
    }
    else
    {
      NSLog(@"Error: Failed to open input file:%@",file);
    }
  }
}</pre>
                                            </div>
                                        </div>
                                        <div class="MCDropDown MCDropDown_Open dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../../../Skins/Default/Stylesheets/Images/transparent.gif" height="15" width="16" alt="Closed" data-mc-alt2="Open" />C#
        </a></span>
                                            <div class="MCDropDownBody dropDownBody"><pre class="prettyprint">/*-----------------------------------------------------------------------------
*  SetFingerprintBeginWriteEnd
*/
private static void
SetFingerprintBeginWriteEnd(GnMusicId GnMusicId)
{
  bool complete = false;

  FileInfo file = new FileInfo(@"..\..\..\data\05-Hummingbird-sample.wav");

  using (BinaryReader b = new BinaryReader(File.Open(file.FullName, FileMode.Open, FileAccess.Read)))
  {
        b.BaseStream.Position = 0;

        /* skip the wave header (first 44 bytes). we know the format of our sample files*/
        b.BaseStream.Seek(44, SeekOrigin.Begin);

        byte[] audioData = b.ReadBytes(2048);

        GnMusicId.FingerprintBegin(GnFingerprintType.kFingerprintTypeGNFPX, 44100, 16, 2);

        while (audioData.Length &gt; 0)
        {
          complete = GnMusicId.FingerprintWrite(audioData, (uint)audioData.Length);
          if (true == complete)
            break;
          else
            audioData = b.ReadBytes(2048);
        }

        GnMusicId.FingerprintEnd();

        if (false == complete)
        {
          /* Fingerprinter doesn't have enough data to generate a fingerprint.
            Note that the sample data does include one track that is too short to fingerprint. */
          Console.WriteLine("\nWarning: input file does contain enough data to generate a fingerprint :" + file.FullName);
        }
  }
}

/*-----------------------------------------------------------------------------
*  MusicidFingerprintAlbum
*/
private static void
MusicidFingerprintAlbum(GnUser user)
{
  Console.WriteLine("\n*****Sample MID-Stream Query*****");

  try
  {
    GnMusicId GnMusicId = new GnMusicId(user);

    /* Set the input fingerprint */
    SetFingerprintBeginWriteEnd(GnMusicId);

    /* Perform the search */
    GnResponseAlbums response = GnMusicId.FindAlbums(GnMusicId.FingerprintDataGet(), GnFingerprintType.kFingerprintTypeGNFPX);

    DisplayFindAlbumResutlsByFingerprint(response);

  }
  catch (GnException e)
  {
  }
}  </pre>
                                            </div>
                                        </div>
                                        <div class="MCDropDown MCDropDown_Open dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage" name="kanchor599"><img class="MCDropDown_Image_Icon" src="../../../../Skins/Default/Stylesheets/Images/transparent.gif" height="15" width="16" alt="Closed" data-mc-alt2="Open" /><b>Python</b></a></span>
                                            <div class="MCDropDownBody dropDownBody"><pre class="prettyprint">try:
  wave_file = open(key_path, "rb")
  # Skip past header. Note: the header may be different size on your files.
  wave_file.seek(44)
  file_info.fingerprint_begin(11025, 16, 1)
  pcm_audio = bytearray(wave_file.read(1024))
  complete = False
  while len(pcm_audio) and not complete:
    pcm_data_buff = gnsdk.byte_buffer(len(pcm_audio))
    for i, pcm_audio_byte in enumerate(pcm_audio):
      pcm_data_buff[i] = pcm_audio_byte
    complete = file_info.fingerprint_write(pcm_data_buff, len(pcm_audio))
    pcm_audio = bytearray(wave_file.read(1024))
    file_info.fingerprint_end()
      
    except IOError as e:
      print 'Exception reading audio file' + e.ErrorDescription() 
    except gnsdk.GnError as e:
    print "Error in reading audio file: " + e.ErrorDescription()
    exit(1)
      
    if not complete :
       print 'Warning: input file does contain enough data to generate a fingerprint:\n' , key_path</pre>
                                            </div>
                                        </div>
                                        <br />
                                        <br />
                                        <br />
                                        <br />
                                        <br />
                                        <br />
                                        <br />
                                        <br />
                                        <br />
                                        <br />
                                        <br />
                                        <br />
                                        <br />
                                        <br />
                                        <br />
                                    </div>
                                </div>
                            </div>
                            <hr width="100%" size="0" align="center" />
                        </div>
                    </section><a data-close="true"></a>
                </div>
            </div>
            <script>/* <![CDATA[ */$(document).foundation();/* ]]> */</script>
        </div>
    </body>
</html>