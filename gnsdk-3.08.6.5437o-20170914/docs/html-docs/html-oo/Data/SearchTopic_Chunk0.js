define({"0":{i:0.0109823320960023,u:"../Content/landing-page/concepts.htm",a:"Concepts This section introduces GNSDK, and presents important product concepts.  Use the side menu to navigate to other topics within this section.",t:"Concepts"},"1":{i:0.00938658975809914,u:"../Content/shared/general/concepts/about-gn.htm",a:"A pioneer in the digital media industry, Gracenote combines information, technology, services, and applications to create ingenious entertainment solutions for the global market.  From media management, enrichment, and discovery products to content identification technologies, Gracenote allows ...",t:"About Gracenote"},"2":{i:0.00938658975809914,u:"../Content/shared/general/concepts/gnsdk-overview.htm",a:"Gracenote SDK (GNSDK) is a platform that delivers Gracenote technologies to devices, desktop applications, web sites, and back-end servers. GNSDK enables easy integration of Gracenote technologies into customer applications and infrastructure—helping developers add critical value to digital media ...",t:"What is the GNSDK?"},"3":{i:0.00938658975809914,u:"../Content/shared/general/concepts/media-elements.htm",a:"Gracenote Media Elements are the software representations of real-world things like CDs, Albums, Tracks, Contributors, and so on. The following is a partial list of the higher-level media elements represented in GNSDK: Music Music CD Album Track Artist Contributor Video Video Product (DVD/Blu-Ray) ...",t:"Gracenote Media Elements"},"4":{i:0.00938658975809914,u:"../Content/shared/music/concepts/genre-list-dependent-values.htm",a:"GNSDK  uses list structures to store strings and other information that do not directly appear in results returned from Gracenote Service. Lists generally contain information such as localized strings and region-specific information. Each list is contained in a corresponding List Type. Some ...",t:"Genre and Other List-Dependent Values"},"5":{i:0.00938658975809914,u:"../Content/shared/music/concepts/core-enriched-metadata.htm",a:"All Gracenote customers can access core metadata from Gracenote for the products they license. Optionally, customers can retrieve additional metadata, known as enriched metadata, by purchasing additional metadata entitlements. For music, core metadata  for albums, tracks, and artists includes: ...",t:"Core and Enriched Metadata"},"6":{i:0.0133759456028571,u:"../Content/shared/music/concepts/mood-tempo-sonic-attribs.htm",a:"Gracenote provides two metadata fields that describe the sonic attributes of an audio track. These fields, mood and tempo, are track-level descriptors that capture the unique characteristics of a specific recording. Mood is a perceptual descriptor of a piece of music, using emotional terminology ...",t:"Mood and Tempo (Sonic Attributes)"},"7":{i:0.0133759456028571,u:"../Content/shared/music/concepts/classical-music-metadata.htm",a:"Gracenote also supports classical music metadata, which is typically more complex than non-classical music. Gracenote uses a Three-Line Solution (TLS) to map classical metadata to an AUDIO_WORK Track, Artist, and Album media elements. The tables below show this mapping. Classical Music Three-Line ...",t:"Classical Music Metadata"},"8":{i:0.00938658975809914,u:"../Content/shared/music/concepts/third-party-ids-preferred-partners.htm",a:"Link can match identified media with third-party identifiers. This allows applications to match media to IDs in stores and other online services—facilitating transactions by helping connect queries directly to commerce.\n Gracenote has preferred partnerships with several partners and matches ...",t:"Third-Party Identifiers and Preferred Partners"},"9":{i:0.00938658975809914,u:"../Content/shared/music/concepts/music-module-overview.htm",a:"Music Modules The following diagram shows the kinds of identification queries each music module supports. ",t:"Music Modules"},"10":{i:0.00938658975809914,u:"../Content/shared/music/concepts/music-id-overview.htm",a:"MusicID allows application developers to deliver a compelling digital entertainment experience by giving users tools to manage and enjoy music collections on media devices, including desktop and mobile devices. MusicID is the most comprehensive identification solution in the industry with the ...",t:"MusicID Overview"},"11":{i:0.00938658975809914,u:"../Content/shared/music/concepts/cd-toc-recog.htm",a:"MusicID-CD is the component of GNSDK that handles recognition of audio CDs and delivery of information including artist, title, and track names. The application provides GNSDK with the TOC from an audio CD and MusicID-CD will identify the CD and provide album and track information. TOC ...",t:"CD TOC Recognition"},"12":{i:0.00938658975809914,u:"../Content/shared/music/concepts/text-based-recog.htm",a:"You can identify music by using a lookup based on text strings. The text strings can be extracted from an audio track’s file path name and from text data embedded within the file, such as mp3 tags. You can provide the following types of input strings: Album title Track title Album artist Track ...",t:"Text-Based Recognition"},"13":{i:0.00938658975809914,u:"../Content/shared/music/concepts/fp-based-recog.htm",a:"Gracenote uses audio fingerprinting as one method to identify tracks.  Fingerprints can be generated from audio files and variety of audio sources, including recorded and degraded sources such as radios and televisions. This enables music identification using arbitrary audio sources—including ...",t:"Fingerprint-Based Recognition"},"14":{i:0.0345388088566435,u:"../Content/shared/music/concepts/music-id-file-overview.htm",a:"MusicID-File provides advanced file-based identification features not included in the MusicID module. MusicID-File can perform recognition using individual files or leverage collections of files to provide advanced recognition. When an application provides decoded audio and text data for each file ...",t:"MusicID-File Overview"},"15":{i:0.00938658975809914,u:"../Content/shared/music/concepts/music-id-vs.-music-id-file.htm",a:"Deciding whether to use the MusicID or MusicID-File SDK depends upon whether you are doing a \"straightforward lookup\" or \"media recognition.\"\n Use the MusicID SDK to perform a straightforward lookup.\nA lookup is considered straightforward if the application has a single type of data and would like ...",t:"MusicID vs. MusicID-File"},"16":{i:0.00938658975809914,u:"../Content/shared/music/concepts/music-id-stream.htm",a:"  You can use MusicID Stream to recognize music delivered as a continuous stream.\nSpecifically, MusicID Stream enables these features: Recognizes streaming music in real time, on-demand (user-initiated). Automatically manages buffering of streaming audio. Continuously identifies the audio stream ...",t:"MusicID Stream"},"17":{i:0.00938658975809914,u:"../Content/shared/music/concepts/music-enrichment.htm",a:"Link provides access to Gracenote Music Enrichment—a single-source solution for enriched content including cover art, artist images, biographies, and reviews. Link and Music Enrichment allow applications to offer enriched user experiences by providing high quality images and information to ...",t:"Music Enrichment"},"18":{i:0.00938658975809914,u:"../Content/shared/music/concepts/playlists-overview.htm",a:"Playlist provides advanced playlist generation enabling a variety of intuitive music navigation methods. Using Playlist, applications can create sets of related media from larger collections—enabling valuable features such as More Like This™ and custom playlists—that help users easily find the music ...",t:"Playlists"},"19":{i:0.00938658975809914,u:"../Content/shared/music/concepts/playlist-reqs.htm",a:"This topic discusses requirements and recommendations for your Playlist implementation. Simplified Playlist Implementation Gracenote recommends streamlining your implementation by using the provided More Like This function, gnsdk_playlist_generate_morelikethis(). It uses the More Like This algorithm ...",t:".Playlist Requirements and Recommendations"},"20":{i:0.0133759456028571,u:"../Content/shared/music/concepts/key-playlist-components.htm",a:"Playlist operates on several key components. The GNSDK Playlist module provides functions to implement and manage the following key components within your application. Media metadata: Metadata of the media items (or files) The media may be on MP3s on a device, or a virtual collection hosted on a ...",t:"Key Playlist Components"},"21":{i:0.00938658975809914,u:"../Content/shared/music/concepts/mood-overview.htm",a:"Gracenote provides track-based mood data that allow users to generate playlists based on the mood they want to listen to. When the user selects a mood, the application provides a playlist of music that corresponds to the selected mood. An important advantage of Mood is that it is track-specific and ...",t:"Mood Overview"},"22":{i:0.00938658975809914,u:"../Content/shared/music/concepts/mood-descriptors.htm",a:"MusicID, MusicID File, and  MusicID Stream   return mood metadata in track results. Gracenote defines over 100 mood types. This granularity of moods is useful in non-automotive applications, such as desktop and tablet interfaces.  To simplify mood selection for with limited size interfaces,   ...",t:"Mood Descriptors"},"23":{i:0.0173653014476151,u:"../Content/shared/music/concepts/mood-navigate.htm",a:"This topic suggests some possible UI designs for mood-based playlists. The designs presented are suggestions only. The Mood APIs are flexible and can support most any type of UI that can be designed.   Slider Navigation Slider Mood Navigation is shown below. Gracenote recommends this design because ...",t:"Navigating with Mood"},"24":{i:0.00938658975809914,u:"../Content/shared/music/concepts/mood-level-arousal-valance.htm",a:"Mood Level Arousal/Valance Values The tables below list the Valence/Arousal value mappings for Level 1 and Level 2 mood levels. Level 1 Mood Levels  Level 2 Mood Levels",t:"Mood Level Arousal/Valance Values"},"25":{i:0.00938658975809914,u:"../Content/shared/music/concepts/rhythm-overview.htm",a:"Rhythm enables seamless integration of any audio source with online music services within a single application. Depending on the supported features of each online music service, an identified track can be used to link to a service to:   Play that song   Play more songs from that artist/album or ...",t:"Rhythm Overview"},"26":{i:0.00938658975809914,u:"../Content/shared/music/concepts/music-id-match-overview.htm",a:"MusicID-Match (also known as Scan and Match) uses a combination of waveform fingerprinting technologies to match tracks within an end-users collection to tracks within a cloud music provider’s catalog, enabling instant playback from all devices without requiring upload.  Full-file fingerprinting ...",t:"MusicID-Match Overview"},"27":{i:0.00938658975809914,u:"../Content/shared/general/best-practices/image-formats-dim.htm",a:"Gracenote provides images in several dimensions to support a variety of applications. Applications or devices must specify image size when requesting an image from Gracenote. All Gracenote images are provided in the JPEG (.jpg) image format. Available Image Dimensions Gracenote provides images to ...",t:"Image Formats and Dimensions"},"28":{i:0.00938658975809914,u:"../Content/shared/general/best-practices/image-dimension-best-practices.htm",a:"Gracenote images – in the form of cover art, artist images and more – are integral features in many online music services, as well as home, automotive and mobile entertainment devices. Gracenote maintains a comprehensive database of images in dimensions to accommodate all popular applications, ...",t:"Image Best Practices"},"29":{i:0.0109823320960023,u:"../Content/landing-page/setup-samples.htm",a:"Setup and Samples This section describes how to setup your development environment to create GNSDK applications. It also describes how to use sample applications to get you started with development. Use the side menu to navigate to other topics within this section.",t:"Setup and Samples"},"30":{i:0.00938658975809914,u:"../Content/shared/general/concepts/modules-overview.htm",a:"GNSDK consists of several modules that support specific Gracenote\n      products. The principal module required for all applications is the\n      GNSDK Manager. Other modules are optional, depending on the functionality of\n    the applications you develop and the products you license from Gracenote. ...",t:"Modules Overview"},"31":{i:0.00938658975809914,u:"../Content/shared/general/concepts/modules-in-package.htm",a:"GNSDK provides the following modules for application development. For more information about these modules, search this documentation or refer to the table of contents. GNSDK Modules DSP LINK LOOKUP_LOCAL LOOKUP_LOCALSTREAM MANAGER MOOD MUSICID MUSICID_FILE MUSICID_MATCH MUSICID_STREAM PLAYLIST ...",t:"Modules in the GNSDK Package"},"32":{i:0.00938658975809914,u:"../Content/shared/general/oo-dev/basic-app-steps.htm",a:"To get started with GNSDK development, Gracenote recommends you follow these general steps, some of which are required and some of which are optional but recommended: Required initialization—see  Setup and Initialization :\n       Get authentication —Get a Client ID/Tag and license file from ...",t:"Basic Application Steps"},"33":{i:0.0180592275596717,u:"../Content/shared/music/oo-dev/setup-init.htm",a:"To get started with GNSDK development: Get a Client ID/Tag and License file for application authentication from Gracenote. See  Authorizing a GNSDK Application . Include the GNSDK header for your platform to include all necessary libraries and headers. See  Including Header Files . Instantiate a ...",t:"Setup and Initialization"},"34":{i:0.0203174473112755,u:"../Content/landing-page/develop-implement.htm",a:"Develop and Implement This section describes how to develop and implement GNSDK applications.  Use the side menu to navigate to other topics within this section.",t:"Develop and Implement"},"35":{i:0.00938658975809914,u:"../Content/shared/general/oo-dev/about-dev-apps-doc.htm",a:"This documentation is intended as a general guide for applications using the object-oriented GNSDK, which supports development in a number of object-oriented languages such as C++, C#, Java, Android Java, and Objective-C. This document discusses classes and methods in a generic sort of way while ...",t:"About this Documentation"},"36":{i:0.0244501853540949,u:"../Content/shared/music/oo-dev/load-locale.htm",a:"GNSDK provides locales  as a convenient way to group locale-dependent metadata specific to a region (such as Europe) and language that should be returned from the Gracenote Service. A locale is defined by a group (such as Music), a language, a region and a descriptor (indicating level of metadata ...",t:"Loading a Locale"},"37":{i:0.0691863168610944,u:"../Content/shared/music/oo-dev/use-sdk-log.htm",a:"The GnLog  class has methods to enable Gracenote SDK logging, set options, write to the SDK log, and disable SDK logging.  There are 3 approaches you can take to implementing logging using the GNSDK: Enable GNSDK logging—This creates log file(s) that you and Gracenote can use to evaluate and debug ...",t:"Using Logging"},"38":{i:0.0517409752585789,u:"../Content/shared/music/oo-dev/enable-storage.htm",a:"To improve performance, your application can enable internal GNSDK storage and caching. The GNSDK has two kinds of storage, each managed through a different class: Online stores for lookups—The GNSDK generates these as lookups take place. Use GnStoreOps methods to manage these.  Local lookup ...",t:"Enabling and Using GNSDK Storage"},"39":{i:0.0364294327847,u:"../Content/shared/music/oo-dev/set-local-online-lookup-modes.htm",a:"You can set lookup modes to determine if GNSDK lookups are done locally or online. GNSDK is designed to operate exactly the same way in either case. You can use the GnUser.LookupMode method to set this option for the user. You can also set this option for specific queries.  The terms local and ...",t:"Setting Local and Online Lookup Modes"},"40":{i:0.0156237214609807,u:"../Content/shared/music/oo-dev/use-local-fp-db.htm",a:"Gracenote provides a mechanism for you to use a local database of track fingerprints and metadata for identification. The SDK can use this database to attempt a local ID prior to going online. Doing this provides a significant performance improvement if a local match is found.  To create a local ...",t:"Using a Local Fingerprint Database"},"41":{i:0.0103839287192886,u:"../Content/shared/music/oo-dev/id-music.htm",a:"GNSDK provides the following modules to identify music:  Music-ID—Using the GnMusicId class, you can identify music using: \n        \n          A CD TOC (table of contents) A text search An Audio Fingerprint A Gracenote identifier\n        \n         See  Identifying Music Using a CD-TOC, Text, or ...",t:"Identifying Music"},"42":{i:0.0203074560786532,u:"../Content/shared/music/oo-dev/id-music-all.htm",a:"The MusicID module is the GNSDK component that handles recognition of non-streaming music though a CD TOC, audio source, fingerprint or search text. MusicID is implemented using the GnMusicId  class. The MusicID-File module is the GNSDK component that handles audio file recognition, implemented ...",t:"Identifying Music Using a CD-TOC, Text, or Fingerprints (MusicID)"},"43":{i:0.0133759456028571,u:"../Content/shared/music/best-practices/music-id-text-best-practices.htm",a:"You can use the GnMusicId class\u0027 FindAlbums and FindMatches methods to identify music files in a collection based on one or more text values. This kind of query is called a text match query.  Possible text inputs are artist name, album title, and track title. You can specify these as fields in the ...",t:"Best Practices for MusicID Text Match Queries"},"44":{i:0.00938658975809914,u:"../Content/shared/music/oo-dev/id-music-batch.htm",a:"The GnMusicIdBatch class gives you all the querying functionality and options contained in the GnMusicId class (see  Identifying Music Using a CD-TOC, Text, or Fingerprints ) for use in a batch process. Batch processing allows you to make multiple queries in a single Gracenote Service request. A\n    ...",t:"Identifying Music in a Batch Query"},"45":{i:0.0295903475013071,u:"../Content/shared/music/oo-dev/musicid-file.htm",a:"The  MusicID-File module can perform recognition using individual audio files or leverage collections of files to provide advanced recognition. When an application provides decoded audio and text data for each file to the library, MusicID-File identifies each file and, if requested, identifies ...",t:"Identifying Audio Files (MusicID-File)"},"46":{i:0.0123287443891372,u:"../Content/shared/music/oo-dev/musicid-stream.htm",a:"The functionality for identifying streaming music is contained in the MusicID Stream module. This module contains the  GnMusicIdStream class that is designed to identify raw audio received in a continuous stream. You should instantiate one instance of this class for each audio stream you are using. ...",t:"Identifying Streaming Music (MusicID Stream)"},"47":{i:0.0103839287192886,u:"../Content/shared/music/oo-dev/process-returned-metadata-results.htm",a:"Processing returned metadata results is pretty straight-forward—objects returned can be traversed and accessed like any other objects. However, there are three things about returned results you need to be aware of: Needs decision—A result could require an additional decision from an application or ...",t:"Processing Returned Metadata Results"},"48":{i:0.00938658975809914,u:"../Content/shared/general/oo-dev/get-enriched-content-asset-fetch.htm",a:"To access enriched metadata content, such as cover art and artist images, you can purchase additional metadata entitlements, and then use the Manager Asset Fetch APIs to get enriched content from  response objects (GnAlbum, GnTrack, etc).  To access enriched content: Purchase additional entitlements ...",t:"Accessing Enriched Content using Asset Fetch"},"49":{i:0.00938658975809914,u:"../Content/shared/music/oo-dev/get-classical-music-metadata.htm",a:"GNSDK supports classical music metadata through GnAudioWork objects. This topic describes now to access this metadata. For an overview, see  Classical Music Metadata . The following code sample, shows how to navigate a classical music audio work and iterate through the returned track. For the full ...",t:"Accessing Classical Music Metadata"},"50":{i:0.0625419027385393,u:"../Content/shared/music/oo-dev/generate-playlist.htm",a:"You can easily integrate the Playlist SDK into your media management application. Note that your application should already have identifiers for all its media and its own metadata database. The Playlist module allows your application to create Playlists—sets of related media—from larger collections. ...",t:"Generating a Playlist"},"51":{i:0.00938658975809914,u:"../Content/shared/music/oo-dev/dev-moodgrid.htm",a:"The Mood library allows applications to generate playlists and user interfaces based on Gracenote Mood descriptors. Mood provides Mood descriptors to the application in a two-dimensional grid that represents varying degrees of moods across each axis. One axis represents energy (calm to energetic) ...",t:"Implementing Mood"},"52":{i:0.00938658975809914,u:"../Content/shared/reference/playlist-pdl-specification.htm",a:"The GNSDK  Playlist Definition Language (PDL) is a query syntax, similar to Structured Query Language (SQL), that enables flexible custom playlist generation using human-readable text strings. PDL allows developers to dynamically create custom playlists. By storing individual PDL statements, ...",t:"Playlist PDL Specification"},"53":{i:0.00938658975809914,u:"../Content/shared/music/oo-dev/dev-rhythm.htm",a:"You can use the Rhythm API to: Create radio stations with a seed value. Generate a playlist with or without having to create a radio station. Adjust a radio station\u0027s playlist with feedback events and tuning parameters Using Rhythm in your application involves doing some or all of the following: ...",t:"Implementing Rhythm"},"54":{i:0.00938658975809914,u:"../Content/shared/music/best-practices/design-reqs-best-practices.htm",a:"Best Practices and Design Requirements  ",t:"Best Practices and Design Requirements"},"55":{i:0.00938658975809914,u:"../Content/shared/general/best-practices/manage-image-dim.htm",a:"Gracenote music and video images – in the form of cover art, artist images and more – are integral features in many online music services, as well as home, automotive and mobile entertainment devices. Gracenote maintains a comprehensive database of images in dimensions to accommodate all popular ...",t:"Managing Image Dimensions"},"56":{i:0.0165486822234465,u:"../Content/shared/music/best-practices/collab-artists-best-practices.htm",a:"The following topic provides best practices for handling collaborations in your application.  Handling Collaborations when Processing a Collection When looking up a track using a text-based lookup, such as when initially processing a user’s collection, use the following best practices: If the input ...",t:"Collaborative Artists Best Practices"},"57":{i:0.00938658975809914,u:"../Content/shared/music/best-practices/audio-stream-best-practices.htm",a:"The following are recommended best practices for applications that recognize streaming audio. Gracenote periodically conducts analysis on its  MusicID Stream   product to evaluate its usage and determine if there are ways we can make it even better. Part of this analysis is determining why some  ...",t:"UI Best Practices for Audio Stream Recognition"},"58":{i:0.00938658975809914,u:"../Content/shared/platform/android/android-gen-deploy.htm",a:"To access GNSDK in an Android application, add the GNSDK jar and native shared libraries to your application’s libs folder. Copy the jar libraries  directly into the libs folder.Copy the native shared libraries into the architecture sub-folders under libs. The table below shows the GNSDK Android ...",t:"Deploying Android Applications"},"59":{i:0.0109823320960023,u:"../Content/landing-page/data-models.htm",a:"Data Models This section describes the data elements, attributes, and values used in GNSDK applications.  Use the side menu to navigate to other topics within this section.",t:"Data Models"},"60":{i:0.0133759456028571,u:"../Content/shared/reference/oo-data-model.htm",a:"Data Models The following table links to GNSDK data models for the corresponding query response type: Music GnResponseAlbums GnResponseTracks GnResponseContributors MusicID-Match GnResponseDataMatches",t:"Data Models"},"61":{i:0.0109823320960023,u:"../Content/landing-page/api-ref.htm",a:"API Reference This section provides reference information about GNSDK APIs. For details about how to use these APIs, see  Develop and Implement. Use the side menu to navigate to other topics within this section.",t:"API Reference"},"62":{i:0.00938658975809914,u:"../Content/shared/reference/oo-api-ref-docs.htm",a:"API Reference Overview The following API Reference documentation is available for GNSDK.   For a list of third-party and open-source (OSS) licenses used by GNSDK, see the /docs/license-files folder in the software package.  ",t:"API Reference Overview"},"63":{i:0.00938658975809914,u:"../Content/landing-page/using-docs.htm",a:"You can navigate to Help topics using the navigation menu at the top of each page. You can also navigate to more detailed list of topics using right-side menu and topic TOCs. Use the breadcrumb links to jump to other sections in your navigation path. Searching  Use the search box to locate all ...",t:"Using Docs and Resources"},"64":{i:0.00938658975809914,u:"../Content/landing-page/gnsdk-home.htm",a:"GNSDK OO APIs Release 3.08.6.5437: 9/14/2017 Help Concepts Setup and Samples Develop and Implement API Reference Data Models PDF Developer Guide Release Notes  ",t:"GNSDK OO APIs "},"65":{i:0.0205380380682045,u:"../Content/shared/music/c-dev/identify/musicid-text.htm",a:"Creating and Executing a Query for a Text-based Lookup The first step in performing a text-based lookup is to create a music query, which returns a query handle that you will use in subsequent calls: gnsdk_musicid_query_create( user_handle, GNSDK_NULL, GNSDK_NULL, \u0026query_handle ); The next step in ...",t:"Identifying Music Using Text"},"66":{i:0.0252775002052835,u:"../Content/shared/music/c-dev/metadata/get-collab-artists-metadata.htm",a:"Some songs are collaborations between two or more artists. For example, the Santana album “Supernatural” contains a number of collaborations, including:\n “Santana featuring Rob Thomas”\n “Santana featuring Dave Matthews”  \nYou might want to take different actions in your application, depending on ...",t:"Accessing Collaborative Artists Metadata"},"67":{i:0.0181154077399362,u:"../Content/shared/music/concepts/data-objects-gdos.htm",a:"The primary goal of any GNSDK application is to recognize media elements and access their metadata. When an application performs a query, Gracenote returns metadata about the target query element, such as the title and genre of an album element. In addition, information about the query operation is ...",t:"About Gracenote Data Objects (GDOs)"},});