<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="_Skins_HTML5___Top_Navigation" data-mc-search-type="Stem" data-mc-help-system-file-name="index.xml" data-mc-path-to-help-system="../../../../../" data-mc-has-content-body="True" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="[%=System.LinkedTitle%]|[%=System.LinkedTitle%]">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Using MusicID-File</title>
        <link href="../../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" />
        <link href="../../../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" />
        <link href="../../../../../Skins/Fluid/Stylesheets/foundation.6.2.3.css" rel="stylesheet" />
        <link href="../../../../../Skins/Fluid/Stylesheets/Styles.css" rel="stylesheet" />
        <link href="../../../../../Skins/Fluid/Stylesheets/Tablet.css" rel="stylesheet" />
        <link href="../../../../../Skins/Fluid/Stylesheets/Mobile.css" rel="stylesheet" />
        <link href="https://cloud.typography.com/7045754/7789972/css/fonts.css" rel="stylesheet" />
        <style>/*&lt;meta /&gt;*/

.button.next-topic-button
{
	-pie-background: url('../../../../../Skins/Default/Stylesheets/Images/navigate-next.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.previous-topic-button
{
	-pie-background: url('../../../../../Skins/Default/Stylesheets/Images/navigate-previous.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.separator-button
{
	-pie-background: linear-gradient(#ffffff, #ececec);
}

.button.remove-highlight-button
{
	-pie-background: url('../../../../../Skins/Default/Stylesheets/Images/highlight.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.separator-button
{
	-pie-background: linear-gradient(#ffffff, #ececec);
}

.button.expand-all-button
{
	-pie-background: url('../../../../../Skins/Default/Stylesheets/Images/expand.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.separator-button
{
	-pie-background: linear-gradient(#ffffff, #ececec);
}

.button.print-button
{
	-pie-background: url('../../../../../Skins/Default/Stylesheets/Images/printer.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.collapse-all-button
{
	-pie-background: url('../../../../../Skins/Default/Stylesheets/Images/collapse.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.needs-pie
{
	behavior: url('../../../../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
        <link href="../../../../Resources/Stylesheets/MainStyles.css" rel="stylesheet" />
        <script src="https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js">
        </script>
        <script src="../../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../../Resources/Scripts/foundation.6.2.3_custom.js">
        </script>
        <script src="../../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="foundation-wrap off-canvas-wrapper">
            <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
                <aside class="off-canvas position-right" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
                    <ul class="off-canvas-drilldown vertical menu off-canvas-list" data-drilldown="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-drilldown-submenu-parent" data-mc-css-tree-node-collapsed="is-drilldown-submenu-parent" data-mc-css-sub-menu="vertical menu slide-in-right is-drilldown-submenu" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="True" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.drilldown" data-mc-toc="True">
                    </ul>
                </aside>
                <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
                    <div>
                        <nav class="title-bar tab-bar" data-mc-ignore="true">
                            <div class="middle title-bar-section outer-row clearfix">
                                <div class="relative clearfix"><a class="logo" href="../../../../landing-page/gnsdk-home.htm" alt="Logo"></a>
                                    <div class="navigation-wrapper nocontent">
                                        <ul class="navigation clearfix" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="1" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                            <li class="placeholder" style="visibility:hidden"><a>placeholder</a>
                                            </li>
                                        </ul>
                                    </div>
                                    <button class="menu-icon" data-toggle="offCanvas"><span></span>
                                    </button>
                                </div>
                            </div>
                            <div class="nav-search row outer-row">
                                <form class="search" action="#">
                                    <div class="search-bar search-bar-container needs-pie">
                                        <input class="search-field needs-pie" type="search" placeholder="Search" />
                                        <div class="search-filter-wrapper">
                                            <div class="search-filter">
                                                <div class="search-filter-content">
                                                    <ul>
                                                        <li>All Files</li>
                                                    </ul>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="search-submit-wrapper" dir="ltr">
                                            <div class="search-submit" title="Search">
                                            </div>
                                        </div>
                                    </div>
                                </form>
                            </div>
                        </nav>
                    </div>
                    <section class="main-section">
                        <div class="row outer-row" data-mc-content-body="True">
                            <p style="font-weight: bold;"><span class="GeneralProductNameFull">GNSDK</span> <span class="GeneralAPI">C</span></p>
                            <p>Version 3.08.6.5437 : <span class="SystemShortDate">9/14/2017</span></p>
                            <hr width="100%" size="0" align="center" />
                            <div class="content">
                                <div id="contentBody">
                                    <div class="row collapse">
                                        <div class="sideContent">
                                            <div class="clearfix">
                                                <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolBar mc-component nocontent">
                                                    <div class="button-group-container-left">
                                                        <button class="button needs-pie next-topic-button" title="Navigate next">
                                                            <img src="../../../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="next topic" />
                                                        </button>
                                                        <button class="button needs-pie previous-topic-button" title="Navigate previous">
                                                            <img src="../../../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="previous topic" />
                                                        </button>
                                                        <div class="button-separator">
                                                        </div>
                                                        <button class="button needs-pie remove-highlight-button" title="Remove Highlights">
                                                            <img src="../../../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="remove highlight" />
                                                        </button>
                                                        <div class="button-separator">
                                                        </div>
                                                        <button class="button needs-pie expand-all-button" data-state1-class="expand-all-button" data-state2-class="collapse-all-button" data-state2-title="Collapse all" title="Expand all" data-state1-title="Expand all">
                                                            <img src="../../../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="expand all" />
                                                        </button>
                                                        <div class="button-separator">
                                                        </div>
                                                        <button class="button needs-pie print-button" title="Print">
                                                            <img src="../../../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="print" />
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                            <ul class="nocontent menu _Skins_SideMenu mc-component" data-mc-is-context-sensitive="True" data-mc-linked-toc="Data/Tocs/gnsdk__gnsdk_c.js" data-mc-side-menu="True" data-mc-max-depth="4" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                            </ul>
                                        </div>
                                        <div class="nocontent">
                                            <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="3" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">You are here: </span>
                                            </div>
                                        </div>
                                        <h1><a name="kanchor852"></a><a name="kanchor853"></a>Using MusicID-File</h1>
                                        <p>As described in <a href="../../concepts/music-id-file-overview.htm" name="kanchor854">MusicID-File Overview</a><a name="kanchor855"></a><a name="kanchor856"></a><a name="kanchor857"></a>, MusicID-File provides three processing techniques to identify audio files: TrackID, AlbumID, and LibraryID. This topic descries the basic steps your application should follow to implement to use these processes:</p>
                                        <h2>TrackID and AlbumID Implementation Steps</h2>
                                        <ol>
                                            <li value="1"><a name="kanchor858"></a><a name="kanchor859"></a>Initialize the GNSDK and the MusicID-File and DSP (for fingerprinting) modules</li>
                                            <li value="2">Create a MusicID-File query handle</li>
                                            <li value="3"><a name="kanchor860"></a>Create a FileInfo object for each media file you want to process, and add it to MusicID-File query handle.</li>
                                            <li value="4">Add identification (fingerprinting and metadata) to each FileInfo object.</li>
                                            <li value="5">Set query options.</li>
                                            <li value="6">Make TrackID or AlbumID query.</li>
                                            <li value="7">Get query results, See <a href="#Getting" name="kanchor861">Getting Results with TrackID and AlbumID.</a></li>
                                            <li value="8">Release resources and shutdown MusicID-File, DSP, and GNSDK.</li>
                                        </ol>
                                        <h2>LibraryID Implementation Steps</h2>
                                        <ol>
                                            <li value="1">Initialize the GNSDK and the MusicID-File and DSP (for fingerprinting) modules.</li>
                                            <li value="2">Author callback functions to handle fingerprinting, metadata, returned statuses, returned results, and so on..</li>
                                            <li value="3">Create a MusicID-File query handle with callbacks array.</li>
                                            <li value="4">Create a FileInfo object for each media file you want to process, and add it to the MusicID-File query handle.</li>
                                            <li value="5">Set query options.</li>
                                            <li value="6">Make LibraryID query. </li>
                                            <li value="7">In callbacks, add identification (fingerprinting and metadata) to each FileInfo object.</li>
                                            <li value="8">In callbacks, get query results. See <a href="#Getting2">Getting Results with LibraryID</a></li>
                                            <li value="9">Release resources and shutdown MusicID-File, DSP, and GNSDK.</li>
                                        </ol>
                                        <h2>Initialization</h2>
                                        <p>Your application needs to have the following include, which by default includes all GNSDK modules:</p><pre class="prettyprint">
#include "gnsdk.h"  /* Includes all modules */</pre>
                                        <p><a name="kanchor862"></a>To use MusicID-File and DSP, you need to make the following calls after initializing the GNSDK and getting a Manager handle:</p><pre class="prettyprint">
gnsdk_musicidfile_initialize(sdkmgr_handle);
gnsdk_dsp_initialize(sdkmgr_handle);  /* Required for fingerprinting */  
</pre>
                                        <h2><a name="kanchor863"></a>Creating a MusicID-File Query Handle</h2>
                                        <p>After standard application initialization, the next step is to create a MusicID-File query handle:</p>
                                        <h3>TrackID and AlbumID</h3><pre class="prettyprint"><a name="kanchor864"></a>
/* Create the MusicID-File query handle */
gnsdk_musicidfile_query_create(
  user_handle,
  GNSDK_NULL,   /* Callback function for status and progress */
  GNSDK_NULL,   /* Callback data */
  &amp;query_handle 
);
</pre>
                                        <h3>LibraryID</h3>
                                        <p>LibraryID requires you to create the query handle with the callbacks that will be used for all processing:</p><pre class="prettyprint"><a name="kanchor865"></a>
/* Create array of callbacks */
gnsdk_musicidfile_callbacks_t midf_callbacks = {
  _musicidfile_status_callback,  /* Status callback */
  _get_fingerprint_callback,   /* Fingerprinting callback */
  _get_metadata_callback     /* Set metadata calback */
  _result_available_callback,  /* Results callback */
  GNSDK_NULL,          /* Results not found callback */
  GNSDK_NULL           /* MusicID complete callback */
};

/* Create the MusicID-File handle */
gnsdk_musicidfile_query_create(
  user_handle,
  &amp;midf_callbacks,    /* Array of callbacks */
  GNSDK_NULL,       /* Callback user data */
  &amp;query_handle       /* Query handle */
);
</pre>
                                        <h2>Creating FileInfo Objects</h2>
                                        <p>For each Track media file  you want to identify with MusicID-File, you must create <i>file information object</i>, called a FileInfo. Each FileInfo object stores theTrack metadata to be used for identification. When the identification query completes, MusicID-File stores the query results in the FileInfo object. </p>
                                        <p><a name="kanchor866"></a><a name="kanchor867"></a><a name="kanchor868"></a>When creating a FileInfo object, you can specify unique string identifier for the media file the FileInfo represents. 
Once created, you can then use gnsdk_musicidfile_query_fileinfo_get_by_ident to retrieve the FileInfo object from a Track Response GDO. See <a href="#Getting">Getting Results from TrackID and AlbumID</a></p>
                                        <p>During an identification query, MusicID-File uses the FileInfo metadata (and optionally audio fingerprint data ) to match eachTrack to an Album. When finished, it returns a Response GDO of type GNSDK_GDO_TYPE_RESPONSE_ALBUM. This GDO contains one or more Albums of type GNSDK_GDO_TYPE_ALBUM. Each Album contains one or more matching Tracks of type GNSDK_GDO_TYPE_TRACK. </p>
                                        <p class="info">FileInfo objects are freed when you release the MusicID-File query handle.</p><pre class="prettyprint">
/*
 * Create a FileInfo object and add to query 
 */
gnsdk_musicidfile_query_fileinfo_create(
  query_handle,  /* Query handle to create the FileInfo object */
  "data/01_stone_roses.wav", /* Unique string identifier for media file */
  GNSDK_NULL,  /* No callback function for status and progress */
  GNSDK_NULL,  /* No callback data */
  &amp;fileinfo_handle   /* Pointer to receive the created FileInfo object */
  );
</pre>
                                        <h2>Setting MusicID-File Query Options</h2>
                                        <p>To set an option for your MusicID-File query, use gnsdk_musicidfile_query_option_set. For example, the following sets the option to use local lookup. By default, a lookup is handled online, but many applications will want to start with a local query first then, if no match is returned, fall back to an online query.</p>
                                        <p>Besides local lookup, there are options for returning the following: alternate names for contributor data, classical music data, fetching content (for example, images) data, external IDs, playlist data, and mood and tempo data. You can also set the preferred language and thread priority. For LibraryID, you can also set the batch size. See the API reference for a complete list and more information.</p><pre class="prettyprint"><a name="kanchor869"></a>
gnsdk_musicidfile_query_option_set(
  query_handle,
  GNSDK_MUSICIDFILE_OPTION_LOOKUP_MODE,
  GNSDK_LOOKUP_MODE_LOCAL
  );
</pre>
                                        <h2><a name="kanchor870"></a><a name="kanchor871"></a><a name="kanchor872"></a>Setting Media File Identification Process</h2>
                                        <p>To identify a media files, you must specifiy the kind of identification process you want MusicID-File to use. There are two main processes:</p>
                                        <ul>
                                            <li value="1">Fingerprinting</li>
                                            <li value="2"><a name="kanchor873"></a>File Metadata</li>
                                        </ul>
                                        <p>For TrackID and AlbumID, you set the identification process before making the query. For LibraryID, you specify the process using callbacks after the query finishes. .</p>
                                        <h3>Fingerprinting</h3>
                                        <p>The MusicID-File fingerprinting APIs use audio data as an identification mechanism. This enables MusicID-File to perform identification based on the audio itself, instead of using only the media file metadata. </p>
                                        <p>For TrackID and Album ID, use the fingerprinting APIs before running the identification query. For LibraryID, use the fingerprinting APIs during the callback gnsdk_musicidfile_callback_get_fingerprint_fn.</p>
                                        <p>Fingerprinting APIs are:</p>
                                        <p><b>gnsdk_musicidfile_fileinfo_fingerprint_begin</b>: Initializes fingerprint generation for a FileInfo handle.</p>
                                        <p><b>gnsdk_musicidfile_fileinfo_fingerprint_end</b>: Finalizes fingerprint generation for a FileInfo handle. </p>
                                        <p><b>gnsdk_musicidfile_fileinfo_fingerprint_write</b>: Provides uncompressed audio data to a FileInfo handle for fingerprint generation. </p>
                                        <p>Example:</p><pre class="prettyprint"><a name="kanchor874"></a><a name="kanchor875"></a>
gnsdk_musicidfile_fileinfo_fingerprint_begin(
  fileinfo_handle,   /* FileInfo handle for fingerprint */
  11025,   /* Sample frequency: 11 kHz, 22 kHz, or 44 kHz */
  16,  /* Sample rate : 8-bit, 16-bit, or 32-bit bytes per sample */
  1  /* Number of channels (1 or 2) */
   );  

gnsdk_musicidfile_fileinfo_fingerprint_write(
  fileinfo_handle,   /* FileInfo handle for the fingerprint */
  pcm_audio,   /* Pointer to audio data buffer that matches audio format 
          set in gnsdk_musicidfile_FileInfo_fingerprint_begin */
  num_bytes,   /* Size of audio data buffer (in bytes) */
  &amp;complete  /* Pointer to receive whether the fingerprint 
        generation has received enough audio data */
   );
</pre>
                                        <h3>Setting and Getting FileInfo Metadata</h3>
                                        <p>Use gnsdk_musicidfile_fileinfo_metadata_set and gnsdk_musicidfile_fileinfo_metadata_get to set and get metadata information for a FileInfo object. MusicID-File will not process FileInfo objects that do not contain metadata.  See the API reference for a complete list of metadata you can set and get.</p>
                                        <p><b>Example</b>:</p><pre class="prettyprint"><a name="kanchor876"></a><a name="kanchor877"></a>
/* Set Artist */
gnsdk_musicidfile_fileinfo_metadata_set(
  fileinfo_handle,
  GNSDK_MUSICIDFILE_FILEINFO_VALUE_ALBUMARTIST,
  "Kardinal Offishall"
);

/* Set Album Title */
gnsdk_musicidfile_fileinfo_metadata_set(
  fileinfo_handle,
  GNSDK_MUSICIDFILE_FILEINFO_VALUE_ALBUMTITLE,
  "Quest for Fire"
 );
</pre>
                                        <h2>Performing the Identification Query</h2>
                                        <p>Each identification process has its own query function:</p>
                                        <p><b>TrackID</b>: gnsdk_musicidfile_query_do_trackid</p>
                                        <p><b>AlbumID</b>: gnsdk_musicidfile_query_do_albumid</p>
                                        <p><b>LibraryID</b>: gnsdk_musicidfile_query_do_libraryid</p>
                                        <p>Each API takes a MusicID-File query handle and a set of query flags. These flags indicate options specific to that query. These include:</p>
                                        <p><b>Asynchronous</b>: Processes MusicID-File on a separate thread and returns immediately</p>
                                        <p><b>Default options</b>: Use default MusicID-File processing options - request a single, best album match. See the GNSDK_MUSICIDFILE_QUERY_FLAG_DEFAULT define in the API reference for more information </p>
                                        <p><b>No threads</b>: Disallows MusicID-File from creating threads for background gathering of fingerprints and metadata</p>
                                        <p><b>Album responses</b>: Only album matches are returned (default)</p>
                                        <p><b>Album or contributor match responses</b>: Album and contributor matches are returned</p>
                                        <p><b>Return all</b>: Have MusicID-File return all results found for each given FileInfo</p>
                                        <p><b>Return single</b>: Have MusicID-File return the single best result for each given FileInfo (default)</p>
                                        <p>See the API reference for more information on the defines for these options.</p>
                                        <p class="info">You can get a query's status at any time with gnsdk_musicidfile_query_status.</p>
                                        <p>Example:</p><pre class="prettyprint">
/* Set options and perform the Query */
gnsdk_uint32_t midf_options = 
  GNSDK_MUSICIDFILE_QUERY_FLAG_RETURN_ALL | 
  MIDF_QUERY_FLAG | 
  GNSDK_MUSICIDFILE_QUERY_FLAG_NO_THREADS;

gnsdk_musicidfile_query_do_trackid(query_handle, midf_options);

</pre>
                                        <h2><a name="Getting"></a>Getting Results with TrackID and AlbumID</h2>
                                        <p>After making your query, you can retrieve the Track child GDO, and then use gnsdk_manager_gdo_value_get with GNSDK_MUSICIDFILE_GDO_VALUE_IDENT to retrieve the identifier value for the matching FileInfo. </p>
                                        <p>You can use the following call to make sure processing has completed within a certain time period</p><pre class="prettyprint">
gnsdk_musicidfile_query_wait_for_complete(
  query_handle, 
  GNSDK_MUSICIDFILE_TIMEOUT_INFINITE,  /* Time to wait in msec or until done (INFINITE) */
  GNSDK_NULL   /* Pointer to error returned on completion */   
   );  
</pre>
                                        <p>Next, use the following call to get the number of FileInfo objects:</p><pre class="prettyprint">
gnsdk_uint32_t  count = 0;
gnsdk_musicidfile_query_fileinfo_count(
query_handle,
&amp;count);
</pre>
                                        <p>Once you have the count, and it is greater than 0, you can use that as an index to retrieve FileInfo objects. If more than 1, typically this would be done in a loop:</p><pre class="prettyprint">

for (i = 0; i &lt; count; i++)
{
  gnsdk_musicidfile_query_fileinfo_get_by_index(
  query_handle,
  i, 
  &amp;fileinfo_handle);
...
}
</pre>
                                        <p><![CDATA[

]]><b>Example</b>:

</p><pre xml:space="preserve" style="font-size: 8pt;"><a name="kanchor878"></a><a name="kanchor879"></a>/* Find the number of matched tracks in an album GDO */
error = gnsdk_manager_gdo_child_count(
  album_gdo,  /* Album GDO from the Response GDO */
  GNSDK_GDO_CHILD_TRACK_MATCHED,  /* Key to get the album */
  &amp;count);  /* Pointer to receive the result */
/* Iterate over the matched tracks */
for (i=1; i&lt;=count; i++)
{ 
  /* Get the matched track */ 
  error = gnsdk_manager_gdo_child_get(
  album_gdo,  /* Album Response GDO handle*/ 
  GNSDK_GDO_CHILD_TRACK_MATCHED,  /* Key to get the matched track GDO */ 
  i,  /* Instance, starts with 1 */ 
  &amp;track_gdo);  /* Track GDO returned */ 
  
  /* Get the identifier for this matched track */
  error = gnsdk_manager_gdo_value_get(
  track_gdo,   /* Track Response GDO handle */ 
  GNSDK_MUSICIDFILE_GDO_VALUE_IDENT, /* Key to get the full GDO */   
  1,   /* Retrieve n'th instance of the value (1-based) */ 
  &amp;ident_str);   /* Pointer to receive the identifier string */   
  
  /* Get the FileInfo using media file identifier */
  error = gnsdk_musicidfile_query_fileinfo_get_by_ident(
  track_gdo,  /* Track Response GDO handle */ 
  ident_str,  /* String identifier of FileInfo to retrieve */
  &amp;fileinfo_handle);  /* Pointer to receive FileInfo handle */
  
  /* Additional processing to retrieve track metadata from FileInfo ) */ 
  ...
}
</pre>
                                        <p>Once you have the FileInfo object, you should check its status to make sure it completed successfully. If it did, you can then get its Response GDO:</p><pre class="prettyprint"><a name="kanchor880"></a>
gnsdk_musicidfile_fileinfo_status_t  fileinfo_status = gnsdk_musicidfile_fileinfo_unprocessed;
gnsdk_error_info_t*  p_error_info  = GNSDK_NULL;
gnsdk_gdo_handle_t   results_gdo   = GNSDK_NULL;

/* Check status. If ok, get Response GDO */
gnsdk_musicidfile_fileinfo_status(fileinfo, &amp;fileinfo_status, &amp;p_error_info);
if (gnsdk_musicidfile_fileinfo_error != fileinfo_status)
{
  if ((gnsdk_musicidfile_fileinfo_result_single == fileinfo_status) || 
  (gnsdk_musicidfile_fileinfo_result_all == fileinfo_status))
  {
  gnsdk_musicidfile_fileinfo_get_response_gdo(fileinfo, &amp;response_gdo);
  ...  /* Parse Response GDO */
  }
}
</pre>
                                        <h2><a name="Getting2"></a>Getting Results with LibraryID</h2>
                                        <p>With LibraryID, results are returned in a results-available callback. Note that the Response GDO is passed to the callback.</p><pre class="prettyprint">
static gnsdk_void_t GNSDK_CALLBACK_API
  _result_available_callback(
  const gnsdk_void_t*   user_data,
  gnsdk_musicidfile_query_handle_t  query_handle,
  gnsdk_gdo_handle_t  response_gdo,
  gnsdk_uint32_t  current_album,
  gnsdk_uint32_t  total_albums,
  gnsdk_bool_t*  p_abort
)
{
  ...Parse Response GDO
}  /* _result_available_callback */
</pre>
                                        <h2><a name="kanchor881"></a>Releasing Resources and Shutting Down</h2>
                                        <p>In addition to the usual releasing of resources (user handle, locale handle, GDOs, and so on.), the following are specific to MusicID-File. You should <b>not</b> call shutdown if the initialize function call fails. Releasing the MusicID-File query handle also releases all associated FileInfo objects. For each module you initialize, you can either call the shutdown for that module or just call GNSDK Manager shutdown - gnsdk_manager_shutdown - which will shut down all libraries.</p><pre class="prettyprint">
/* Release MusicID-File - releases associated FileInfo objects */
gnsdk_musicidfile_query_release(query_handle);
gnsdk_musicidfile_shutdown();
</pre>
                                    </div>
                                </div>
                            </div>
                            <hr width="100%" size="0" align="center" />
                        </div>
                    </section><a data-close="true"></a>
                </div>
            </div>
            <script>/* <![CDATA[ */$(document).foundation();/* ]]> */</script>
        </div>
    </body>
</html>