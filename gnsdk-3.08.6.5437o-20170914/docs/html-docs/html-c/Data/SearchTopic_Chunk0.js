define({"0":{i:0.00713981298369546,u:"../Content/landing-page/concepts.htm",a:"Concepts This section introduces GNSDK, and presents important product concepts.  Use the side menu to navigate to other topics within this section.",t:"Concepts"},"1":{i:0.00610239184217265,u:"../Content/shared/general/concepts/about-gn.htm",a:"A pioneer in the digital media industry, Gracenote combines information, technology, services, and applications to create ingenious entertainment solutions for the global market.  From media management, enrichment, and discovery products to content identification technologies, Gracenote allows ...",t:"About Gracenote"},"2":{i:0.00610239184217265,u:"../Content/shared/general/concepts/gnsdk-overview.htm",a:"Gracenote SDK (GNSDK) is a platform that delivers Gracenote technologies to devices, desktop applications, web sites, and back-end servers. GNSDK enables easy integration of Gracenote technologies into customer applications and infrastructure—helping developers add critical value to digital media ...",t:"What is the GNSDK?"},"3":{i:0.00610239184217265,u:"../Content/shared/general/concepts/media-elements.htm",a:"Gracenote Media Elements are the software representations of real-world things like CDs, Albums, Tracks, Contributors, and so on. The following is a partial list of the higher-level media elements represented in GNSDK: Music Music CD Album Track Artist Contributor Video Video Product (DVD/Blu-Ray) ...",t:"Gracenote Media Elements"},"4":{i:0.00610239184217265,u:"../Content/shared/music/concepts/genre-list-dependent-values.htm",a:"GNSDK  uses list structures to store strings and other information that do not directly appear in results returned from Gracenote Service. Lists generally contain information such as localized strings and region-specific information. Each list is contained in a corresponding List Type. Some ...",t:"Genre and Other List-Dependent Values"},"5":{i:0.0103924738427865,u:"../Content/shared/music/concepts/core-enriched-metadata.htm",a:"All Gracenote customers can access core metadata from Gracenote for the products they license. Optionally, customers can retrieve additional metadata, known as enriched metadata, by purchasing additional metadata entitlements. For music, core metadata  for albums, tracks, and artists includes: ...",t:"Core and Enriched Metadata"},"6":{i:0.00869594469597967,u:"../Content/shared/music/concepts/mood-tempo-sonic-attribs.htm",a:"Gracenote provides two metadata fields that describe the sonic attributes of an audio track. These fields, mood and tempo, are track-level descriptors that capture the unique characteristics of a specific recording. Mood is a perceptual descriptor of a piece of music, using emotional terminology ...",t:"Mood and Tempo (Sonic Attributes)"},"7":{i:0.00869594469597967,u:"../Content/shared/music/concepts/classical-music-metadata.htm",a:"Gracenote also supports classical music metadata, which is typically more complex than non-classical music. Gracenote uses a Three-Line Solution (TLS) to map classical metadata to an AUDIO_WORK Track, Artist, and Album media elements. The tables below show this mapping. Classical Music Three-Line ...",t:"Classical Music Metadata"},"8":{i:0.00610239184217265,u:"../Content/shared/music/concepts/third-party-ids-preferred-partners.htm",a:"Link can match identified media with third-party identifiers. This allows applications to match media to IDs in stores and other online services—facilitating transactions by helping connect queries directly to commerce.\n Gracenote has preferred partnerships with several partners and matches ...",t:"Third-Party Identifiers and Preferred Partners"},"9":{i:0.00610239184217265,u:"../Content/shared/music/concepts/music-module-overview.htm",a:"Music Modules The following diagram shows the kinds of identification queries each music module supports. ",t:"Music Modules"},"10":{i:0.007831427078044,u:"../Content/shared/music/concepts/music-id-overview.htm",a:"MusicID allows application developers to deliver a compelling digital entertainment experience by giving users tools to manage and enjoy music collections on media devices, including desktop and mobile devices. MusicID is the most comprehensive identification solution in the industry with the ...",t:"MusicID Overview"},"11":{i:0.0112894975497867,u:"../Content/shared/music/concepts/cd-toc-recog.htm",a:"MusicID-CD is the component of GNSDK that handles recognition of audio CDs and delivery of information including artist, title, and track names. The application provides GNSDK with the TOC from an audio CD and MusicID-CD will identify the CD and provide album and track information. TOC ...",t:"CD TOC Recognition"},"12":{i:0.00610239184217265,u:"../Content/shared/music/concepts/text-based-recog.htm",a:"You can identify music by using a lookup based on text strings. The text strings can be extracted from an audio track’s file path name and from text data embedded within the file, such as mp3 tags. You can provide the following types of input strings: Album title Track title Album artist Track ...",t:"Text-Based Recognition"},"13":{i:0.00610239184217265,u:"../Content/shared/music/concepts/fp-based-recog.htm",a:"Gracenote uses audio fingerprinting as one method to identify tracks.  Fingerprints can be generated from audio files and variety of audio sources, including recorded and degraded sources such as radios and televisions. This enables music identification using arbitrary audio sources—including ...",t:"Fingerprint-Based Recognition"},"14":{i:0.0106129842218558,u:"../Content/shared/music/concepts/music-id-file-overview.htm",a:"MusicID-File provides advanced file-based identification features not included in the MusicID module. MusicID-File can perform recognition using individual files or leverage collections of files to provide advanced recognition. When an application provides decoded audio and text data for each file ...",t:"MusicID-File Overview"},"15":{i:0.00610239184217265,u:"../Content/shared/music/concepts/music-id-vs.-music-id-file.htm",a:"Deciding whether to use the MusicID or MusicID-File SDK depends upon whether you are doing a \"straightforward lookup\" or \"media recognition.\"\n Use the MusicID SDK to perform a straightforward lookup.\nA lookup is considered straightforward if the application has a single type of data and would like ...",t:"MusicID vs. MusicID-File"},"16":{i:0.00610239184217265,u:"../Content/shared/music/concepts/music-id-stream.htm",a:"  You can use MusicID Stream to recognize music delivered as a continuous stream.\nSpecifically, MusicID Stream enables these features: Recognizes streaming music in real time, on-demand (user-initiated). Automatically manages buffering of streaming audio. Continuously identifies the audio stream ...",t:"MusicID Stream"},"17":{i:0.00610239184217265,u:"../Content/shared/music/concepts/music-enrichment.htm",a:"Link provides access to Gracenote Music Enrichment—a single-source solution for enriched content including cover art, artist images, biographies, and reviews. Link and Music Enrichment allow applications to offer enriched user experiences by providing high quality images and information to ...",t:"Music Enrichment"},"18":{i:0.00610239184217265,u:"../Content/shared/music/concepts/playlists-overview.htm",a:"Playlist provides advanced playlist generation enabling a variety of intuitive music navigation methods. Using Playlist, applications can create sets of related media from larger collections—enabling valuable features such as More Like This™ and custom playlists—that help users easily find the music ...",t:"Playlists"},"19":{i:0.00610239184217265,u:"../Content/shared/music/concepts/playlist-reqs.htm",a:"This topic discusses requirements and recommendations for your Playlist implementation. Simplified Playlist Implementation Gracenote recommends streamlining your implementation by using the provided More Like This function, gnsdk_playlist_generate_morelikethis(). It uses the More Like This algorithm ...",t:".Playlist Requirements and Recommendations"},"20":{i:0.00869594469597967,u:"../Content/shared/music/concepts/key-playlist-components.htm",a:"Playlist operates on several key components. The GNSDK Playlist module provides functions to implement and manage the following key components within your application. Media metadata: Metadata of the media items (or files) The media may be on MP3s on a device, or a virtual collection hosted on a ...",t:"Key Playlist Components"},"21":{i:0.00610239184217265,u:"../Content/shared/music/concepts/mood-overview.htm",a:"Gracenote provides track-based mood data that allow users to generate playlists based on the mood they want to listen to. When the user selects a mood, the application provides a playlist of music that corresponds to the selected mood. An important advantage of Mood is that it is track-specific and ...",t:"Mood Overview"},"22":{i:0.00610239184217265,u:"../Content/shared/music/concepts/mood-descriptors.htm",a:"MusicID, MusicID File, and  MusicID Stream   return mood metadata in track results. Gracenote defines over 100 mood types. This granularity of moods is useful in non-automotive applications, such as desktop and tablet interfaces.  To simplify mood selection for with limited size interfaces,   ...",t:"Mood Descriptors"},"23":{i:0.0112894975497867,u:"../Content/shared/music/concepts/mood-navigate.htm",a:"This topic suggests some possible UI designs for mood-based playlists. The designs presented are suggestions only. The Mood APIs are flexible and can support most any type of UI that can be designed.   Slider Navigation Slider Mood Navigation is shown below. Gracenote recommends this design because ...",t:"Navigating with Mood"},"24":{i:0.00610239184217265,u:"../Content/shared/music/concepts/mood-level-arousal-valance.htm",a:"Mood Level Arousal/Valance Values The tables below list the Valence/Arousal value mappings for Level 1 and Level 2 mood levels. Level 1 Mood Levels  Level 2 Mood Levels",t:"Mood Level Arousal/Valance Values"},"25":{i:0.00610239184217265,u:"../Content/shared/music/concepts/rhythm-overview.htm",a:"Rhythm enables seamless integration of any audio source with online music services within a single application. Depending on the supported features of each online music service, an identified track can be used to link to a service to:   Play that song   Play more songs from that artist/album or ...",t:"Rhythm Overview"},"26":{i:0.00610239184217265,u:"../Content/shared/music/concepts/music-id-match-overview.htm",a:"MusicID-Match (also known as Scan and Match) uses a combination of waveform fingerprinting technologies to match tracks within an end-users collection to tracks within a cloud music provider’s catalog, enabling instant playback from all devices without requiring upload.  Full-file fingerprinting ...",t:"MusicID-Match Overview"},"27":{i:0.00610239184217265,u:"../Content/shared/general/best-practices/image-formats-dim.htm",a:"Gracenote provides images in several dimensions to support a variety of applications. Applications or devices must specify image size when requesting an image from Gracenote. All Gracenote images are provided in the JPEG (.jpg) image format. Available Image Dimensions Gracenote provides images to ...",t:"Image Formats and Dimensions"},"28":{i:0.00710959972120484,u:"../Content/shared/general/best-practices/image-dimension-best-practices.htm",a:"Gracenote images – in the form of cover art, artist images and more – are integral features in many online music services, as well as home, automotive and mobile entertainment devices. Gracenote maintains a comprehensive database of images in dimensions to accommodate all popular applications, ...",t:"Image Best Practices"},"29":{i:0.00713981298369546,u:"../Content/landing-page/setup-samples.htm",a:"Setup and Samples This section describes how to setup your development environment to create GNSDK applications. It also describes how to use sample applications to get you started with development. Use the side menu to navigate to other topics within this section.",t:"Setup and Samples"},"30":{i:0.00610239184217265,u:"../Content/shared/general/concepts/modules-overview.htm",a:"GNSDK consists of several modules that support specific Gracenote\n      products. The principal module required for all applications is the\n      GNSDK Manager. Other modules are optional, depending on the functionality of\n    the applications you develop and the products you license from Gracenote. ...",t:"Modules Overview"},"31":{i:0.00610239184217265,u:"../Content/shared/general/concepts/modules-in-package.htm",a:"GNSDK provides the following modules for application development. For more information about these modules, search this documentation or refer to the table of contents. GNSDK Modules DSP LINK LOOKUP_LOCAL LOOKUP_LOCALSTREAM MANAGER MOOD MUSICID MUSICID_FILE MUSICID_MATCH MUSICID_STREAM PLAYLIST ...",t:"Modules in the GNSDK Package"},"32":{i:0.00610239184217265,u:"../Content/shared/music/c-dev/sample-apps/sample-apps-overview.htm",a:"GNSDK provides working command-line  sample applications that demonstrate common queries and application scenarios.   The package also provides sample databases you can use when developing your applications.  Gracenote recommends stepping through the sample applications with a debugger to observe ...",t:"Using the Sample Applications"},"33":{i:0.00610239184217265,u:"../Content/shared/music/c-dev/sample-apps/c-quickstart.htm",a:"Introduction This tutorial shows you how to build a simple GNSDK C application from scratch. The application does a track title text search to identify an album in the Gracenote database. The Gracenote SDK provides several methods to access Gracenote metadata from a C application, most of which are ...",t:"GNSDK C Quick Start Tutorial"},"34":{i:0.07521312741252,u:"../Content/shared/music/c-dev/sample-apps/build-sample-app.htm",a:"GNSDK provides sample applications for many common use cases. You can find the sample applications  in the samples/\u003cmodule\u003e folders of your GNSDK package, where \u003cmodule\u003e corresponds to GNSDK modules and features, like musicid_lookup_album_toc, musicid_file_albumid, and so on.  Each sample ...",t:"Building a Sample Application"},"35":{i:0.00610239184217265,u:"../Content/shared/music/c-dev/sample-apps/music-id-sample-app-c.htm",a:"This topic steps through a GNSDK C sample application. This application shows how to do music identification using the MusicID module. We chose this sample for a walkthrough because it demonstrates several tasks that are common to (or can be extrapolated to) most GNSDK product use cases.  The sample ...",t:"GNSDK C Sample Application Walkthrough"},"36":{i:0.00610239184217265,u:"../Content/shared/music/c-dev/sample-apps/prerequisites.htm",a:"To build and run any of the sample applications, see  Building a Sample Application . In general, you need three things from Gracenote: License File—Details your permissions and access to GNSDK libraries. Client ID—Your specific GNSDK access identifier. Client Tag—A hashed representation of the ...",t:"Prerequisites"},"37":{i:0.00610239184217265,u:"../Content/shared/music/c-dev/sample-apps/init.htm",a:"After main() does some initial error checking on the Client ID, Client Tag and License File parameters, it calls _init_gnsdk() which makes a number of initialization calls. Initialize the GNSDK Manager Your application must initialize the GNSDK Manager prior to calling any other GNSDK  library. The ...",t:"Initialization"},"38":{i:0.00610239184217265,u:"../Content/shared/music/c-dev/sample-apps/music-id-queries.htm",a:"An application can make a MusicID identification query in several ways, including text lookups, TOC lookups, fingerprint lookups, and so on. For a complete list of these options and examples, see  MusicID Overview .  After identifying an element, Gracenote recommends using GDOs (Gracenote Data ...",t:"Queries"},"39":{i:0.00610239184217265,u:"../Content/shared/music/c-dev/sample-apps/release-resources-shut.htm",a:"Before the program exits, it calls _shutdown_gnsdk(), which releases the user handle and shuts down the MusicID library, local storage and the GNSDK: \ngnsdk_manager_user_release(user_handle);\n\n/*\n * The sample app code (not shown) saves the serialized user handle for later use during initialization. ...",t:"Releasing Resources and Shutting Down"},"40":{i:0.0132087414730566,u:"../Content/landing-page/develop-implement.htm",a:"Develop and Implement This section describes how to develop and implement GNSDK applications.  Use the side menu to navigate to other topics within this section.",t:"Develop and Implement"},"41":{i:0.00610239184217265,u:"../Content/shared/general/c-dev/app-design/app-flow.htm",a:"This topic describes how to get started with GNSDK development. Every GNSDK application follows this general design and application flow: Include the GNSDK  header files for the modules your application requires. These should be based on the Gracenote products you licensed, such as MusicID. Include ...",t:"Application Flow"},"42":{i:0.00610239184217265,u:"../Content/shared/general/c-dev/app-design/work-header-files-libraries.htm",a:"GNSDK  consists of a set of shared modules. The GNSDK Manager module is required for all applications. All other modules are optional. Your application\u0027s feature requirements determine which of the optional modules should be used. Each GNSDK module has one or more corresponding header files. Other ...",t:"Working with Header Files and Libraries"},"43":{i:0.0406577596273463,u:"../Content/shared/general/c-dev/app-design/authorize-app.htm",a:"Authorizing GNSDK Applications Gracenote manages access to metadata using a combination of product licensing and server-side metadata entitlements.  As a Gracenote customer, Gracenote works with you to determine the kind of products you need (such as MusicID, Playlist, and so on). Gracenote also ...",t:"Authorizing a GNSDK Application"},"44":{i:0.00610239184217265,u:"../Content/shared/general/c-dev/app-design/init-shut-down-gnsdk.htm",a:"Initializing an Application Your application needs to initialize a module before using it. It needs to first call gnsdk_manager_initialize() to use the GNSDK Manager module. This call requires a client ID and a Gracenote license file and returns a handle necessary to initialize other modules. ...",t:"Initializing and Shutting Down GNSDK"},"45":{i:0.00610239184217265,u:"../Content/shared/general/c-dev/app-design/set-network-proxy-values.htm",a:"An application can set options to aid in working with networks and proxy servers. Depending on the topology of your network, you can alter certain values using gnsdk_manager_user_option_set() so your Gracenote application can effectively work within your system. Proxy Server Options GNSDK supports ...",t:"Setting Network and Proxy Options"},"46":{i:0.00610239184217265,u:"../Content/shared/general/c-dev/app-design/configure-log.htm",a:"There are three approaches you can take to implementing logging using the GNSDK: Enable GNSDK logging  - This creates log file(s) that you and Gracenote can use to evaluate and debug any problems your application might encounter when using the SDK. Enable GNSDK logging and add to it - Use the ...",t:"Configuring Logging"},"47":{i:0.00610239184217265,u:"../Content/shared/general/c-dev/app-design/dev-status-callbacks.htm",a:" GNSDK  allows you to implement status callback functions that are called at certain points during ongoing operations. Implementing a callback function allows you to monitor an operation\u0027s status, and cancel it if necessary. You can set a callback for any of the following operations:\n MusicID ...",t:"Implementing Status Callbacks "},"48":{i:0.0140883051737774,u:"../Content/shared/general/c-dev/app-design/use-locales.htm",a:"GNSDK provides locales  as a convenient way to group locale-dependent metadata specific to a region (such as  Europe) and language that should be returned from the Gracenote service. A locale is defined by a group (such as  Music), a language, a region and a  descriptor (indicating level of metadata ...",t:"Using Locales"},"49":{i:0.0100941450631075,u:"../Content/shared/music/c-dev/advanced/use-lists.htm",a:"GNSDK  uses list structures to store strings and other information that do not directly appear in results returned from the Gracenote Service. Lists generally contain information such as localized strings and region-specific information. Each list is contained in a corresponding List Type. Lists are ...",t:"Using Lists"},"50":{i:0.00610239184217265,u:"../Content/shared/music/concepts/local-storage.htm",a:"Local Storage This section describes options for local storage and caching using GNSDK.",t:"Local Storage"},"51":{i:0.0257247642175605,u:"../Content/shared/general/c-dev/app-design/set-local-online-lookup-modes.htm",a:"An application can perform local or online lookups as shown in the following diagram. Lookup Providers A lookup provider is a module that implements the ability to query data for matches. GNSDK allows both local and online lookup providers to be enabled at run-time, and you can use lookup modes to ...",t:"Setting Local and Online Lookup Modes"},"52":{i:0.00610239184217265,u:"../Content/shared/general/c-dev/app-design/local-online-lookup-comparison.htm",a:"The following tables indicate whether technologies, content, and metadata are supported for local and online lookups. Note: Local lookups support album and contributor matching. Online lookups support album matching only. No contributor matches will occur online.      ",t:"Local and Online Lookup Comparison"},"53":{i:0.00610239184217265,u:"../Content/shared/general/c-dev/app-design/work-local-dbs.htm",a:"Working with local databases is very similar to working with online Gracenote services. In both cases, queries are set up in the same way, and results are processed in the same way.  Initializing a Local Database To work with a local database, you must first initialize the SQLite library and then ...",t:"Working with Local Databases"},"54":{i:0.00610239184217265,u:"../Content/shared/general/c-dev/app-design/get-local-db-manifest.htm",a:"GNSDK provides local databases, which differ based on region, configuration, and other factors. You can retrieve manifest information about your local databases, including database versions, available image sizes, and available locale configurations. Your application can use this information to ...",t:"Getting Manifest Information about Local Databases"},"55":{i:0.00610239184217265,u:"../Content/shared/general/c-dev/app-design/local-results-dbs.htm",a:"GNSDK applications supports application created read/write databases for storing local and online query and image fetch results. These databases are referred to as Results databases  Results databases are similar to the off-the-shelf monthly production gdbs in that they have the same files and ...",t:"Using Results Databases"},"56":{i:0.0111013529421397,u:"../Content/shared/general/c-dev/app-design/use-sqlite-for-storage-cache.htm",a:"The GNSDK SQLite (gnsdk_storage_sqlite ) module provides a local storage solution using the SQLite database engine. This module is used to manage a local cache of content and Gracenote Service queries. This is for GNSDK use only - your application cannot use this database for its own storage. SQLite ...",t:"Using  SQLite for Storage and Caching"},"57":{i:0.00610239184217265,u:"../Content/shared/music/c-dev/advanced/load-balance.htm",a:"GNSDK\u0027s load balancing capability enables it to automatically send its outgoing queries to a set of addresses. The purpose of this is to spread its queries across a set of host servers (hosts) so that no single host processes the entire load of a single SDK instance. When load balancing is enabled, ...",t:"Load Balancing"},"58":{i:0.0353568929109386,u:"../Content/shared/music/concepts/data-objects-gdos.htm",a:"The primary goal of any GNSDK application is to recognize media elements and access their metadata. When an application performs a query, Gracenote returns metadata about the target query element, such as the title and genre of an album element. In addition, information about the query operation is ...",t:"About Gracenote Data Objects (GDOs)"},"59":{i:0.00610239184217265,u:"../Content/shared/general/c-dev/app-design/gdo-workflows.htm",a:"A Gracenote identification query can return no matches, a single match, or multiple matches. The workflow for managing single and multiple GDO matches is similar, but not identical. The following sections describe these two workflows. GDO Workflow for a Single GDO Match The simplest example of a GDO ...",t:"GDO Workflows"},"60":{i:0.00869594469597967,u:"../Content/shared/general/c-dev/app-design/common-gdo-tasks.htm",a:"Retrieving a Track GDO from an Album GDO To retrieve a Track GDO from an Album GDO, use gnsdk_manager_gdo_child_get() and one of the following keys. For these keys, the term track number is the sequential number of the track on the album’s CD jacket. The ordinal is the track position (1-based) in ...",t:"Common GDO Tasks"},"61":{i:0.00610239184217265,u:"../Content/shared/general/c-dev/app-design/gdo-navigation-examples.htm",a:"Gracenote Data Objects (GDOs) are the primary identifiers used to access Gracenote metadata. Example: Looking Up an Album by a TOC Sample Application: musicid_lookup_album_toc/main.c Application steps: Authenticate caller, initialize GNSDK and MusicID module, and initialize SQLite and local lookup ...",t:"GDO Navigation Examples"},"62":{i:0.007831427078044,u:"../Content/shared/music/c-dev/advanced/work-non-gdo-ids.htm",a:"In addition to GDOs, Gracenote supports other media element identifiers, as shown in the following table. All of these represent TUI/Tag pairs.  Examples of Non-GDO Identifiers The following table shows examples of non-GDO identifiers. GNSDK  Identifiers Comparison Matrix The following table lists ...",t:"Working with Non-GDO Identifiers"},"63":{i:0.0134940545041545,u:"../Content/shared/music/c-dev/advanced/render-gdo-as-xml.htm",a:"To present GDO metadata to a user, or to process its contents for other uses, an application can render it in XML format.  You can do this with the following call: \n/*\n * Render the Album GDO as XML to the \"xml\" parameter\n */\ngnsdk_manager_gdo_render(album_gdo, GNSDK_GDO_RENDER_XML_FULL, \u0026xml);\n The ...",t:"Rendering a GDO as XML"},"64":{i:0.0218426687370293,u:"../Content/shared/music/c-dev/identify/identify-music.htm",a:"GNSDK supports identification of both non-streaming and streaming music.  Non-streaming music generally refers to music stored as a file or on a CD. You can identify non-streaming music using a CD TOC, a Gracenote identifier, or other information extracted from an audio file. Streaming music refers ...",t:"Identifying Music"},"65":{i:0.00610239184217265,u:"../Content/shared/music/c-dev/identify/musicid-use-cd-toc.htm",a:"You can use MusicID-CD to identify an audio CD TOC. For more information, see  CD TOC Recognition . Example: Identifying an Album Using a CD TOC The example below illustrates a simple TOC lookup for local and online systems. The code for the local and online lookups is the same, except for two ...",t:"Identifying Music Using a CD TOC"},"66":{i:0.0133521525542631,u:"../Content/shared/music/c-dev/identify/musicid-text.htm",a:"Creating and Executing a Query for a Text-based Lookup The first step in performing a text-based lookup is to create a music query, which returns a query handle that you will use in subsequent calls: gnsdk_musicid_query_create( user_handle, GNSDK_NULL, GNSDK_NULL, \u0026query_handle ); The next step in ...",t:"Identifying Music Using Text"},"67":{i:0.00869594469597967,u:"../Content/shared/music/best-practices/music-id-text-best-practices.htm",a:"You can use the GnMusicId class\u0027 FindAlbums and FindMatches methods to identify music files in a collection based on one or more text values. This kind of query is called a text match query.  Possible text inputs are artist name, album title, and track title. You can specify these as fields in the ...",t:"Best Practices for MusicID Text Match Queries"},"68":{i:0.00610239184217265,u:"../Content/shared/music/c-dev/identify/identify-music-batch.htm",a:"Batch processing allows multiple queries to be performed in a single request to Gracenote Service. A single batch request can contain different query types, and each query can have different inputs.  For example, a batch lookup can have a query for finding matches with text inputs in addition to ...",t:"Identifying Music Using Batch Processing"},"69":{i:0.0106129842218558,u:"../Content/shared/music/c-dev/identify/musicid-file.htm",a:"As described in  MusicID-File Overview , MusicID-File provides three processing techniques to identify audio files: TrackID, AlbumID, and LibraryID. This topic descries the basic steps your application should follow to implement to use these processes: TrackID and AlbumID Implementation Steps ...",t:"Using MusicID-File"},"70":{i:0.00610239184217265,u:"../Content/shared/music/c-dev/identify/use-musicid-file.htm",a:"MusicID-File provides three processing methods enabling advanced file-based media recognition. Each method utilizes the same population and result management APIs, so which method to use is determined by the application\u0027s requirement at the time of processing. MusicID-File returns a GDO for each ...",t:"Advanced Music Identification using MusicID-File"},"71":{i:0.00610239184217265,u:"../Content/shared/music/c-dev/identify/musicid-stream.htm",a:"The functionality for identifying streaming music is contained in the library gnsdk_musicid_stream.  In general, identification requires up to seven seconds of audio. If there is not enough audio available to make the identification, the system waits until enough audio is received.\nThe ...",t:"Identifying Streaming Music"},});