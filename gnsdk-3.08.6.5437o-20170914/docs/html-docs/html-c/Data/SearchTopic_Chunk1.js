define({"72":{i:0.00610239184217265,u:"../Content/shared/music/c-dev/identify/musicid-imp-audsuit-proc.htm",a:"Implementing audio suitability processing, that is, determining if the audio you are capturing is of high enough quality to attempt an identification, can be done with both  MusicID (prior to queries) and MusicIdStream (prior to listening). Setting ASP for Queries To turn on ASP, set a GNSDK music ...",t:"Implementing Audio Suitability Processing (ASP)"},"73":{i:0.00610239184217265,u:"../Content/shared/music/best-practices/audio-stream-best-practices.htm",a:"The following are recommended best practices for applications that recognize streaming audio. Gracenote periodically conducts analysis on its  MusicID Stream   product to evaluate its usage and determine if there are ways we can make it even better. Part of this analysis is determining why some  ...",t:"UI Best Practices for Audio Stream Recognition"},"74":{i:0.0107585997004561,u:"../Content/shared/music/best-practices/collab-artists-best-practices.htm",a:"The following topic provides best practices for handling collaborations in your application.  Handling Collaborations when Processing a Collection When looking up a track using a text-based lookup, such as when initially processing a user’s collection, use the following best practices: If the input ...",t:"Collaborative Artists Best Practices"},"75":{i:0.00610239184217265,u:"../Content/shared/music/c-dev/metadata/navigate-music-gdos.htm",a:"Top-level music GDOs generally represent Albums and Tracks. An album or track query can return a response GDO containing 0-n matches (child GDOs). For example, a track query could return multiple album matches since the track may exist on more than one album. In this case, to display metadata ...",t:"Navigating Music GDOs"},"76":{i:0.00610239184217265,u:"../Content/shared/music/c-dev/metadata/get-classical-music-metadata.htm",a:"To retrieve classical music metadata, set a query handle with the applicable query option set to True to access the metadata and automatically render it to the XML output. For an overview of classical music metadata, see  Classical Music Metadata . The following table lists the applicable query ...",t:"Accessing Classical Music Metadata"},"77":{i:0.00610239184217265,u:"../Content/shared/music/c-dev/metadata/get-external-ids.htm",a:" GNSDK  can match identified media with External IDs (XIDs). These are third-party identifiers provided by preferred Gracenote partners that allow applications to match identified media to merchandise IDs in online stores and other services – facilitating transactions by helping connect queries ...",t:"Accessing External IDs "},"78":{i:0.0164333642257106,u:"../Content/shared/music/c-dev/metadata/get-collab-artists-metadata.htm",a:"Some songs are collaborations between two or more artists. For example, the Santana album “Supernatural” contains a number of collaborations, including:\n “Santana featuring Rob Thomas”\n “Santana featuring Dave Matthews”  \nYou might want to take different actions in your application, depending on ...",t:"Accessing Collaborative Artists Metadata"},"79":{i:0.00610239184217265,u:"../Content/shared/music/c-dev/advanced/improve-matches-use-both.htm",a:"To help improve the accuracy of the results returned from Gracenote Service, you can use both a TOC and a fingerprint in a query. The use of a fingerprint for additional identification criteria can increase the number of single- and multi-exact matches and decreasing the number of fuzzy match ...",t:"Improving Matches Using Both CD TOC and Fingerprints"},"80":{i:0.0173327448239798,u:"../Content/shared/general/c-dev/get-enriched-content-asset-fetch.htm",a:"You can access enriched content through the Manager Asset Fetch APIs, gnsdk_manager_asset_fetch2() , or through the Link  Module. Enriched data includes: Album cover art Artist images Genre art (only available via the Link module) Using the Asset Fetch API The Asset Fetch APIs are the preferred way ...",t:"Accessing Enriched Content using Asset Fetch"},"81":{i:0.00710959972120484,u:"../Content/shared/general/c-dev/get-enriched-content-link.htm",a:"You can access enriched content through the Manager Asset Fetch APIs, gnsdk_manager_asset_fetch2() , or through the Link  Module. Enriched data includes: Album cover art Artist images Genre art (only available via the Link module) Using the Link Module You can use the  Link Module  to retrieve ...",t:"Accessing Enriched Content using Link"},"82":{i:0.00610239184217265,u:"../Content/shared/general/c-dev/get-enriched-content-via-url.htm",a:"There may be cases when you wish to retrieve metadata, descriptors, or external identifiers as quickly as possible, while lazy-loading enriched content such as cover art in the background.  To achieve this, the GNSDK returns URL pointers to the enriched content, giving you greater control over when ...",t:"Using Enriched Content URLs"},"83":{i:0.00610239184217265,u:"../Content/shared/music/c-dev/metadata/music-metadata-ref-overview.htm",a:"Music Metadata Reference Overview The following metadata reference examples are intended to give the reader some idea of what is returned from MusicID Query APIs. Note that they do not contain every possible field that could be returned. For a complete reference, consult the GNSDK  Data Model.",t:"Music Metadata Reference Overview"},"84":{i:0.00610239184217265,u:"../Content/shared/music/c-dev/metadata/album-metadata-example.htm",a:"The following is intended to give the reader some idea of the metadata returned in an album GDO. \u003cALBUM\u003e\n  \u003cPACKAGE_LANG ID=\"1\" LANG=\"eng\"\u003eEnglish\u003c/PACKAGE_LANG\u003e\n  \u003cARTIST\u003e\n  \u003cNAME_OFFICIAL\u003e\n    \u003cDISPLAY\u003eNelly\u003c/DISPLAY\u003e\n  \u003c/NAME_OFFICIAL\u003e\n  \u003cCONTRIBUTOR\u003e\n    \u003cNAME_OFFICIAL\u003e\n    ...",t:"Album Metadata Example"},"85":{i:0.00610239184217265,u:"../Content/shared/music/c-dev/metadata/classical-album-metadata-example.htm",a:"",t:"classical-album-metadata-example"},"86":{i:0.0106129842218558,u:"../Content/shared/music/c-dev/discover/generate-playlist.htm",a:"Generating a Playlist involves the following general steps. Create a new Playlist collection summary. Populate the collection summary with unique identifiers and GDOs. (Optional) Store the collection summary. (Optional) Load the stored collection summary into memory in preparation for Playlist ...",t:"Generating a Playlist"},"87":{i:0.00610239184217265,u:"../Content/shared/music/c-dev/discover/dev-moodgrid.htm",a:"The Mood APIs: Encapsulate Gracenote’s Mood Editorial Content (mood layout and IDs). Simplify access to Mood results through x,y coordinates. Allow for multiple local and online data sources through Mood Providers. Enable pre-filtering of results using genre, origin, and era attributes. Support 5x5 ...",t:"Implementing Mood"},"88":{i:0.00610239184217265,u:"../Content/shared/music/c-dev/metadata/get-mood-tempo-metadata.htm",a:"In GNSDK , access sonic and mood attribute metadata from Gracenote Service by setting the GNSDK_MUSICID_OPTION_ENABLE_SONIC_DATA option to True when performing MusicID Album queries. Setting this option causes the mood and tempo metadata contained in a GDO to be automatically rendered as XML output: ...",t:"Accessing Mood and Tempo Metadata"},"89":{i:0.0106129842218558,u:"../Content/shared/reference/playlist-pdl-specification.htm",a:"The GNSDK  Playlist Definition Language (PDL) is a query syntax, similar to Structured Query Language (SQL), that enables flexible custom playlist generation using human-readable text strings. PDL allows developers to dynamically create custom playlists. By storing individual PDL statements, ...",t:"Playlist PDL Specification"},"90":{i:0.00610239184217265,u:"../Content/shared/music/c-dev/discover/dev-rhythm.htm",a:"The Rhythm API: Creates radio stations based on GDO seeds. Supports playlist creation either within radio stations, or just with GDO seeds. Provides for a feedback event mechanism for playlist content modification. Implementing Rhythm in an application involves the following steps: Initializing the ...",t:"Implementing Rhythm"},"91":{i:0.00610239184217265,u:"../Content/shared/platform/android/android-gen-deploy.htm",a:"To access GNSDK in an Android application, add the GNSDK jar and native shared libraries to your application’s libs folder. Copy the jar libraries  directly into the libs folder.Copy the native shared libraries into the architecture sub-folders under libs. The table below shows the GNSDK Android ...",t:"Deploying Android Applications"},"92":{i:0.00610239184217265,u:"../Content/shared/general/c-dev/app-design/test-app.htm",a:"Gracenote helps you validate and ship your Gracenote-enabled application. Read the following sections carefully to learn the procedures you must follow to release your application. Enabling Test Mode When you are ready to begin testing your Gracenote-enabled application, send an email to  ...",t:"Testing an Application"},"93":{i:0.00610239184217265,u:"../Content/gnsdk/submit/submit-new-updated.htm",a:"Using the Submit module, an application can send new or updated Album content to Gracenote Services, including Album and Track metadata, and Track Feature data, such as audio fingerprints, and descriptors (genre, mood, tempo, and so on). Common use cases for Submit are: Entering information for a ...",t:"Submitting New and Updated Content"},"94":{i:0.00610239184217265,u:"../Content/gnsdk/submit/submit-terminology.htm",a:"Submit Terminology Submit uses the following terms for its components and processes:",t:"Submit Terminology"},"95":{i:0.00610239184217265,u:"../Content/gnsdk/submit/submit-process.htm",a:"The Submit process involves these basic steps: Create editable GDOs and/or features. Create parcels as containers for the updated content. Validate the GDO data for submission. All data submitted to Gracenote must first pass a validation test. Validation ensures that the submission meets Gracenote ...",t:"Submit Process"},"96":{i:0.00610239184217265,u:"../Content/gnsdk/submit/submit-apis.htm",a:"Submit APIs Submit APIs are grouped into four functional categories: General, Album and Track Metadata, Track Features, and Parcel.",t:"Submit APIs"},"97":{i:0.00610239184217265,u:"../Content/gnsdk/submit/editable-gdo-child-value.htm",a:"The following table lists child and value keys for the GDO types supported by editable GDOs. The child keys are relevant for use in any gnsdk_submit_edit_gdo_child_*() API. The value keys can be used for any gnsdk_submit_edit_gdo_value_*() API, except for the Genre and Role list-based keys. See ...",t:"Editable GDO Child and Value Keys"},"98":{i:0.00610239184217265,u:"../Content/gnsdk/submit/editable-gdo-considerations.htm",a:"When creating editable GDOs, consider these guidelines: The GNSDK_GDO_VALUE_GENRE  and GNSDK_GDO_VALUE_ROLE keys are list-based values. List-based values are returned by Gracenote Services as numbered IDs. These numbered IDs map to string display values based on locally-available lists. GNSDK ...",t:"Editable GDO Considerations"},"99":{i:0.00610239184217265,u:"../Content/gnsdk/submit/submit-album-metadata.htm",a:"You can submit Album metadata using two methods: Use the gnsdk_submit_edit_gdo_*() functions (Recommended). Directly edit XML created from an XML-rendered Full album GDO, using the gnsdk_manager_gdo_render_to_xml() function with the GNSDK_GDO_RENDER_XML_SUBMIT render flag. The Gracenote XML Parser ...",t:"Submitting Album Metadata"},"100":{i:0.00610239184217265,u:"../Content/gnsdk/submit/example-edit-submit.htm",a:"This simplified example demonstrates editing and submitting an existing album GDO and submitting it to Gracenote Service.  Sample Code:  submit_album/main.c\n     Steps for this sample application: Initialize Manager, User, MusicID, Submit, and DSP. Create empty GDO. Set the TOC in empty GDO created ...",t:"Example: Editing and Submitting an Existing Album GDO"},"101":{i:0.00610239184217265,u:"../Content/gnsdk/submit/submit-track-features.htm",a:"Submitting Track Features You can submit Track Features only for Album GDOs generated from a TOC lookup. The following table shows the Submit functions used to create and process Track Features.",t:"Submitting Track Features"},"102":{i:0.00610239184217265,u:"../Content/gnsdk/submit/example-submit-track-features.htm",a:"The example illustrates processing and submitting feature data. Sample Application: submit_feature/main.c\n     Steps for this code sample: Initialize features to determine which data is required by the Gracenote Service, and must be uploaded. Define each stream\u0027s audio source information. Process a ...",t:"Example: Submitting Track Features (1)"},"103":{i:0.00610239184217265,u:"../Content/gnsdk/submit/example-submit-track-features1.htm",a:"Sample Code:  submit_feature/main.c\n     Steps for this sample application: Initialize Manager, User, MusicID, Submit, and DSP. Create MusicID album query. Get album GDO. Create submit parcel. Initialize the features for the Album using its GDO. See if there are any features to generate. For all ...",t:"Example: Submitting Track Features (2)"},"104":{i:0.00610239184217265,u:"../Content/gnsdk/submit/submit-parcels.htm",a:"The Submit APIs for parcels support the following use cases: Add 1-n editable GDOs or 1-n Features, or both to a parcel. Add a unique identifier for a GDO or a Feature used later to access callback status information. Bundle editable GDOs and Features together in a parcel, or upload either item ...",t:"Submitting Parcels"},"105":{i:0.00610239184217265,u:"../Content/gnsdk/submit/example-submit-album.htm",a:"Example: Submitting an Album Parcel Sample Application: submit_album/main.c Steps for this application: Create an editable GDO Edit  the album metadata. Add this GDO to a submit parcel. Upload  the parcel to submit the data. Verify the upload status of the parcel and the GDO. ",t:"Example: Submitting an Album Parcel"},"106":{i:0.00610239184217265,u:"../Content/gnsdk/submit/availability-of-edited-data-cache.htm",a:"Edited Submit data resides in the application\u0027s lookup cache. You can implement a cache using the SQLite module, or alternately, implement your own application-specific cache.) Note that SQLite stores only the edited data, and not the entire parcel. Submit data edits exist in the lookup cache ...",t:"Availability of Edited Data Cache"},"107":{i:0.00610239184217265,u:"../Content/gnsdk/submit/synchronize-dependent-fields.htm",a:"Some metadata fields are dependent on other fields. Therefore editing a dependent field\u0027s metadata without also editing the fields on which it depends may cause a synchronization problem.  To avoid this problem, the Submit functionality ensures that when a field\u0027s metadata is changed, all of its ...",t:"Synchronizing Dependent Fields"},"108":{i:0.00610239184217265,u:"../Content/gnsdk/submit/enable-test-mode-for-submit.htm",a:"You must test the application\u0027s submission logic to prevent the upload of invalid data to Gracenote Service. Set the GNSDK_SUBMIT_PARCEL_UPLOAD_FLAG_TEST_MODE flag to indicate the application is uploading test parcels. Once Gracenote validates the application\u0027s submission logic, clear the flag to ...",t:"Enabling Test Mode for Submit Finalization"},"109":{i:0.00610239184217265,u:"../Content/shared/reference/oo-api-ref-docs.htm",a:"API Reference Overview The following API Reference documentation is available for GNSDK.   For a list of third-party and open-source (OSS) licenses used by GNSDK, see the /docs/license-files folder in the software package.  ",t:"API Reference Overview"},"110":{i:0.00713981298369546,u:"../Content/landing-page/data-models.htm",a:"Data Models This section describes the data elements, attributes, and values used in GNSDK applications.  Use the side menu to navigate to other topics within this section.",t:"Data Models"},"111":{i:0.00869594469597967,u:"../Content/shared/reference/c-data-model-online.htm",a:"The GNSDK C data model represents Gracenote media elements and metadata. The model establishes interrelationships among Gracenote Data Objects (GDOs) and the metadata they contain or reference. A table-based version of the data model is here:  C Data Model . This table maps GDO types to their ...",t:"C Data Model"},"112":{i:0.00713981298369546,u:"../Content/landing-page/api-ref.htm",a:"API Reference This section provides reference information about GNSDK APIs. For details about how to use these APIs, see  Develop and Implement. Use the side menu to navigate to other topics within this section.",t:"API Reference"},"113":{i:0.00610239184217265,u:"../Content/landing-page/using-docs.htm",a:"You can navigate to Help topics using the navigation menu at the top of each page. You can also navigate to more detailed list of topics using right-side menu and topic TOCs. Use the breadcrumb links to jump to other sections in your navigation path. Searching  Use the search box to locate all ...",t:"Using Docs and Resources"},"114":{i:0.00610239184217265,u:"../Content/landing-page/gnsdk-home.htm",a:"GNSDK C Release 3.08.6.5437: 9/14/2017 Help Concepts Setup and Samples Develop and Implement API Reference Data Models PDF Developer Guide Release Notes  ",t:"GNSDK C "},"115":{i:0.00710959972120484,u:"../Content/shared/music/concepts/link-module-overview.htm",a:"The preferred way to access enriched content is through the Manager Asset Fetch APIs. Alternatively, you can use the Link module. Enriched content offered through Gracenote Link includes: Album cover art Artist images Album reviews Genre art For more information, see  Accessing Enriched Content.  ",t:"Link Module Overview"},});