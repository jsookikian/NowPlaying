//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GracenoteSDK {

public class GnMarshalUTF8 : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GnMarshalUTF8(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GnMarshalUTF8 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~GnMarshalUTF8() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          gnsdk_csharp_marshalPINVOKE.delete_GnMarshalUTF8(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

		public static void ReleaseMarshaledUTF8String(System.IntPtr marshaled)
		{
			System.Runtime.InteropServices.Marshal.FreeHGlobal(marshaled);
		}

        public static System.IntPtr NativeUtf8FromString(string managedString) 
		{
			if (managedString == null)
			{
				managedString = string.Empty;
			}
			
			int len = System.Text.Encoding.UTF8.GetByteCount(managedString);
			byte[] buffer = new byte[len + 1];
			System.Text.Encoding.UTF8.GetBytes(managedString, 0, managedString.Length, buffer, 0);

            System.IntPtr nativeUtf8 = System.Runtime.InteropServices.Marshal.AllocHGlobal(buffer.Length);
            System.Runtime.InteropServices.Marshal.Copy(buffer, 0, nativeUtf8, buffer.Length);

			return nativeUtf8;
		}

        public static System.IntPtr NativeArrayFromByteArray(byte[] array) 
		{
            System.IntPtr native = System.IntPtr.Zero;
			if (array.Length > 0) {
                native = System.Runtime.InteropServices.Marshal.AllocHGlobal(array.Length);
                System.Runtime.InteropServices.Marshal.Copy(array, 0, native, array.Length);
			}
			return native;
		}
		public static string StringFromNativeUtf8(System.IntPtr nativeUtf8) 
		{
			int len = 0;
			if (System.IntPtr.Zero != nativeUtf8)
			{
				while (System.Runtime.InteropServices.Marshal.ReadByte(nativeUtf8, len) != 0) 
				{
					++len;
				}
				
				if (len == 0) 
				{	
					return string.Empty;
				}
				
				byte[] buffer = new byte[len];
				System.Runtime.InteropServices.Marshal.Copy(nativeUtf8, buffer, 0, buffer.Length);
				
				return System.Text.Encoding.UTF8.GetString(buffer);
			}
			else
			{
				return string.Empty;
			}
		}

	
  public GnMarshalUTF8() : this(gnsdk_csharp_marshalPINVOKE.new_GnMarshalUTF8(), true) {
  }

}

}
