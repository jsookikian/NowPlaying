
namespace GracenoteSDK {

/**
* \class GnRhythmQueryOptions
* Configures options for GnRhythmQuery
*/
public class GnRhythmQueryOptions : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GnRhythmQueryOptions(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GnRhythmQueryOptions obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

/**
*  Sets the lookup data value for the MusicID-File query.
*  @param lookupData   [in] Set One of the GnLookupData values
*  @param bEnable      [in] True or false to enable or disable
*  @ingroup Rhythm_Options
*/
  public void LookupData(GnLookupData lookupData, bool bEnable) {
    gnsdk_csharp_marshalPINVOKE.GnRhythmQueryOptions_LookupData(swigCPtr, (int)lookupData, bEnable);
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
  }

/**
*  Specifies how many tracks to return in the playlist response to this query.
*  @param count        [in] The number of tracks to return.
*  <p><b>Remarks:</b></p>
*  The range for this option is 1..25, The default value is 5.
*  @ingroup Rhythm_Options
*/
  public void ReturnCount(uint count) {
    gnsdk_csharp_marshalPINVOKE.GnRhythmQueryOptions_ReturnCount(swigCPtr, count);
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
  }

/**
*  Tuning Parameter to influence how Rhythm uses popularity to affect how the radio station playlist is generated.
*  @param amount	[in] new popularity focus setting.
*  <p><b>Remarks:</b></p>
*  The range for this option is 0..1000, The default value is 1000.
*  @ingroup Rhythm_Options
*/
  public void FocusPopularity(uint amount) {
    gnsdk_csharp_marshalPINVOKE.GnRhythmQueryOptions_FocusPopularity(swigCPtr, amount);
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
  }

/**
*  Tuning Parameter to influence how Rhythm uses similarity to affect how the radio station playlist is generated.
*  @param amount	[in] new similarity focus setting.
*  <p><b>Remarks:</b></p>
*  The range for this option is 0..1000, The default value is 1000.
*  @ingroup Rhythm_Options
*/
  public void FocusSimilarity(uint amount) {
    gnsdk_csharp_marshalPINVOKE.GnRhythmQueryOptions_FocusSimilarity(swigCPtr, amount);
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
  }

/**
*  Specifies a maximum number of tracks per artist for recommended playlist results.
*  @param count    [in] Maximum number of tracks per artist.
*  <p><b>Remarks:</b></p>
*  This option is only applicable to Recommendations generated by GnRhythmQuery
*  The range for this option is 1..1000.
*  @ingroup Rhythm_Options
*/
  public void RecommendationMaxTracksPerArtist(uint count) {
    gnsdk_csharp_marshalPINVOKE.GnRhythmQueryOptions_RecommendationMaxTracksPerArtist(swigCPtr, count);
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
  }

/**
*  Enabling this option will cause results to be sequenced in a radio-like fashion, otherwise results will be without sequencing.
*  @param bEnable  [in] True or false to enable or disable
*  <p><b>Remarks:</b></p>
*  This option is only applicable to Recommendations generated by GnRhythmQuery
*  To enable Radio sequencing, define this option key with a True value.
*  Without this option Rhythm might return you 5 Britney Spears tracks.
*  With this option enabled Rhtyhm would never do that, it would mix it up more, like a radio station.
*  @ingroup Rhythm_Options
*/
  public void RecommendationRotationRadio(bool bEnable) {
    gnsdk_csharp_marshalPINVOKE.GnRhythmQueryOptions_RecommendationRotationRadio(swigCPtr, bEnable);
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
  }

/**
*  When creating a radio station, you have the option to enable DMCA rules, which reduce the repetition of songs and albums in conformance with DMCA guidelines. By default, DMCA is not enabled.
*  @param bEnable  [in] True or false to enable or disable
*  <p><b>Remarks:</b></p>
*  This option cannot be changed after the radio station has been created
*  @ingroup Rhythm_Options
*/
  public void StationDMCA(bool bEnable) {
    gnsdk_csharp_marshalPINVOKE.GnRhythmQueryOptions_StationDMCA(swigCPtr, bEnable);
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
  }

/**
* Set a specific network interface to use with this object's connections. This can be useful for
* systems with multiple network interaces. Otherwise, the operating system determines the interface to use.
*  @param intfName [in] Local IP address or system name for the desired network interface
*  @ingroup Rhythm_Options
*/
  public void NetworkInterface(string intfName) {
    gnsdk_csharp_marshalPINVOKE.GnRhythmQueryOptions_NetworkInterface__SWIG_0(swigCPtr, intfName);
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
  }

/**
* Return network interface being use with this object's connections if one has been set.
* If no specific network interface has been set this option will return an empty string.
*  @ingroup Rhythm_Options
*/
  public string NetworkInterface() {
    string ret = gnsdk_csharp_marshalPINVOKE.GnRhythmQueryOptions_NetworkInterface__SWIG_1(swigCPtr);
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

/**
*  Set option using option name
*  @param option   [in] Option name
*  @param bEnable	[in] True or false to enable or disable
*  @ingroup Rhythm_Options
*/
  public void Custom(string option, bool bEnable) {
    gnsdk_csharp_marshalPINVOKE.GnRhythmQueryOptions_Custom__SWIG_0(swigCPtr, option, bEnable);
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
  }

/**
*  Set option using option name
*  @param option   [in] Option name
*  @param value	[in] Option value, as unsigned integer
*  @ingroup Rhythm_Options
*/
  public void Custom(string option, uint value) {
    gnsdk_csharp_marshalPINVOKE.GnRhythmQueryOptions_Custom__SWIG_1(swigCPtr, option, value);
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
  }

/**
*  Set option using option name
*  @param option   [in] Option name
*  @param value	[in] Option value
*  @ingroup Rhythm_Options
*/
  public virtual void Custom(string option, string value) {
    gnsdk_csharp_marshalPINVOKE.GnRhythmQueryOptions_Custom__SWIG_2(swigCPtr, option, value);
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
