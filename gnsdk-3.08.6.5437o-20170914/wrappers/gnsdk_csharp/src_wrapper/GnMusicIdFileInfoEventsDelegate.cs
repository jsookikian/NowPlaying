//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GracenoteSDK {

public class GnMusicIdFileInfoEventsDelegate : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GnMusicIdFileInfoEventsDelegate(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GnMusicIdFileInfoEventsDelegate obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~GnMusicIdFileInfoEventsDelegate() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          gnsdk_csharp_marshalPINVOKE.delete_GnMusicIdFileInfoEventsDelegate(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual void GatherFingerprint(GnMusicIdFileInfo fileinfo, uint currentFile, uint totalFiles, IGnCancellable canceller) {
    gnsdk_csharp_marshalPINVOKE.GnMusicIdFileInfoEventsDelegate_GatherFingerprint(swigCPtr, GnMusicIdFileInfo.getCPtr(fileinfo), currentFile, totalFiles, IGnCancellable.getCPtr(canceller));
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void GatherMetadata(GnMusicIdFileInfo fileinfo, uint currentFile, uint totalFiles, IGnCancellable canceller) {
    gnsdk_csharp_marshalPINVOKE.GnMusicIdFileInfoEventsDelegate_GatherMetadata(swigCPtr, GnMusicIdFileInfo.getCPtr(fileinfo), currentFile, totalFiles, IGnCancellable.getCPtr(canceller));
    if (gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Pending) throw gnsdk_csharp_marshalPINVOKE.SWIGPendingException.Retrieve();
  }

  public GnMusicIdFileInfoEventsDelegate() : this(gnsdk_csharp_marshalPINVOKE.new_GnMusicIdFileInfoEventsDelegate(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("GatherFingerprint", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateGnMusicIdFileInfoEventsDelegate_0(SwigDirectorGatherFingerprint);
    if (SwigDerivedClassHasMethod("GatherMetadata", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateGnMusicIdFileInfoEventsDelegate_1(SwigDirectorGatherMetadata);
    gnsdk_csharp_marshalPINVOKE.GnMusicIdFileInfoEventsDelegate_director_connect(swigCPtr, swigDelegate0, swigDelegate1);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(GnMusicIdFileInfoEventsDelegate));
    return hasDerivedMethod;
  }

  private void SwigDirectorGatherFingerprint(global::System.IntPtr fileinfo, uint currentFile, uint totalFiles, global::System.IntPtr canceller) {
    GatherFingerprint(new GnMusicIdFileInfo(fileinfo, false), currentFile, totalFiles, new IGnCancellable(canceller, false));
  }

  private void SwigDirectorGatherMetadata(global::System.IntPtr fileinfo, uint currentFile, uint totalFiles, global::System.IntPtr canceller) {
    GatherMetadata(new GnMusicIdFileInfo(fileinfo, false), currentFile, totalFiles, new IGnCancellable(canceller, false));
  }

  public delegate void SwigDelegateGnMusicIdFileInfoEventsDelegate_0(global::System.IntPtr fileinfo, uint currentFile, uint totalFiles, global::System.IntPtr canceller);
  public delegate void SwigDelegateGnMusicIdFileInfoEventsDelegate_1(global::System.IntPtr fileinfo, uint currentFile, uint totalFiles, global::System.IntPtr canceller);

  private SwigDelegateGnMusicIdFileInfoEventsDelegate_0 swigDelegate0;
  private SwigDelegateGnMusicIdFileInfoEventsDelegate_1 swigDelegate1;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(GnMusicIdFileInfo), typeof(uint), typeof(uint), typeof(IGnCancellable) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(GnMusicIdFileInfo), typeof(uint), typeof(uint), typeof(IGnCancellable) };
}

}
