
package com.gracenote.gnsdk;

/** 
** Configures options for {@link GnRhythmQuery} 
*/ 
 
public class GnRhythmQueryOptions {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected GnRhythmQueryOptions(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(GnRhythmQueryOptions obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        throw new UnsupportedOperationException("C++ destructor does not have public access");
      }
      swigCPtr = 0;
    }
  }

/** 
*  Sets the lookup data value for the MusicID-File query. 
*  @param lookupData   [in] Set One of the {@link GnLookupData} values 
*  @param bEnable      [in] True or false to enable or disable 
* 
*/ 
 
  public void lookupData(GnLookupData lookupData, boolean bEnable) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnRhythmQueryOptions_lookupData(swigCPtr, this, lookupData.swigValue(), bEnable);
  }

/** 
*  Specifies how many tracks to return in the playlist response to this query. 
*  @param count        [in] The number of tracks to return. 
*  <p><b>Remarks:</b></p> 
*  The range for this option is 1..25, The default value is 5. 
* 
*/ 
 
  public void returnCount(long count) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnRhythmQueryOptions_returnCount(swigCPtr, this, count);
  }

/** 
*  Tuning Parameter to influence how Rhythm uses popularity to affect how the radio station playlist is generated. 
*  @param amount	[in] new popularity focus setting. 
*  <p><b>Remarks:</b></p> 
*  The range for this option is 0..1000, The default value is 1000. 
* 
*/ 
 
  public void focusPopularity(long amount) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnRhythmQueryOptions_focusPopularity(swigCPtr, this, amount);
  }

/** 
*  Tuning Parameter to influence how Rhythm uses similarity to affect how the radio station playlist is generated. 
*  @param amount	[in] new similarity focus setting. 
*  <p><b>Remarks:</b></p> 
*  The range for this option is 0..1000, The default value is 1000. 
* 
*/ 
 
  public void focusSimilarity(long amount) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnRhythmQueryOptions_focusSimilarity(swigCPtr, this, amount);
  }

/** 
*  Specifies a maximum number of tracks per artist for recommended playlist results. 
*  @param count    [in] Maximum number of tracks per artist. 
*  <p><b>Remarks:</b></p> 
*  This option is only applicable to Recommendations generated by {@link GnRhythmQuery} 
*  The range for this option is 1..1000. 
* 
*/ 
 
  public void recommendationMaxTracksPerArtist(long count) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnRhythmQueryOptions_recommendationMaxTracksPerArtist(swigCPtr, this, count);
  }

/** 
*  Enabling this option will cause results to be sequenced in a radio-like fashion, otherwise results will be without sequencing. 
*  @param bEnable  [in] True or false to enable or disable 
*  <p><b>Remarks:</b></p> 
*  This option is only applicable to Recommendations generated by {@link GnRhythmQuery} 
*  To enable Radio sequencing, define this option key with a True value. 
*  Without this option Rhythm might return you 5 Britney Spears tracks. 
*  With this option enabled Rhtyhm would never do that, it would mix it up more, like a radio station. 
* 
*/ 
 
  public void recommendationRotationRadio(boolean bEnable) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnRhythmQueryOptions_recommendationRotationRadio(swigCPtr, this, bEnable);
  }

/** 
*  When creating a radio station, you have the option to enable DMCA rules, which reduce the repetition of songs and albums in conformance with DMCA guidelines. By default, DMCA is not enabled. 
*  @param bEnable  [in] True or false to enable or disable 
*  <p><b>Remarks:</b></p> 
*  This option cannot be changed after the radio station has been created 
* 
*/ 
 
  public void stationDMCA(boolean bEnable) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnRhythmQueryOptions_stationDMCA(swigCPtr, this, bEnable);
  }

/** 
* Set a specific network interface to use with this object's connections. This can be useful for 
* systems with multiple network interaces. Otherwise, the operating system determines the interface to use. 
*  @param intfName [in] Local IP address or system name for the desired network interface 
* 
*/ 
 
  public void networkInterface(String intfName) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnRhythmQueryOptions_networkInterface__SWIG_0(swigCPtr, this, intfName);
  }

/** 
* Return network interface being use with this object's connections if one has been set. 
* If no specific network interface has been set this option will return an empty string. 
* 
*/ 
 
  public String networkInterface() throws com.gracenote.gnsdk.GnException {
    return gnsdk_javaJNI.GnRhythmQueryOptions_networkInterface__SWIG_1(swigCPtr, this);
  }

/** 
*  Set option using option name 
*  @param option   [in] Option name 
*  @param bEnable	[in] True or false to enable or disable 
* 
*/ 
 
  public void custom(String option, boolean bEnable) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnRhythmQueryOptions_custom__SWIG_0(swigCPtr, this, option, bEnable);
  }

/** 
*  Set option using option name 
*  @param option   [in] Option name 
*  @param value	[in] Option value, as unsigned integer 
* 
*/ 
 
  public void custom(String option, long value) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnRhythmQueryOptions_custom__SWIG_1(swigCPtr, this, option, value);
  }

/** 
*  Set option using option name 
*  @param option   [in] Option name 
*  @param value	[in] Option value 
* 
*/ 
 
  public void custom(String option, String value) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnRhythmQueryOptions_custom__SWIG_2(swigCPtr, this, option, value);
  }

}
