/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.gracenote.gnsdk;

public class GnSubmit {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected GnSubmit(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(GnSubmit obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        gnsdk_javaJNI.delete_GnSubmit(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

	private IGnStatusEvents pEventHandler;
	private IGnStatusEventsProxyU eventHandlerProxy;

  public GnSubmit(GnUser user, IGnStatusEvents pEventHandler) throws com.gracenote.gnsdk.GnException {
	this(0, true);
	
	eventHandlerProxy = new IGnStatusEventsProxyU(pEventHandler);
	this.pEventHandler=pEventHandler;	// <REFERENCE_NAME_CHECK><TYPE>IGnStatusEvents</TYPE><NAME>pEventHandler</NAME></REFERENCE_NAME_CHECK> leave for scripted verification of names
	
	swigCPtr = gnsdk_javaJNI.new_GnSubmit__SWIG_0(GnUser.getCPtr(user), user, (eventHandlerProxy==null)?0:IGnStatusEventsProxyL.getCPtr(eventHandlerProxy), eventHandlerProxy);
}

  public GnSubmit(GnUser user) throws com.gracenote.gnsdk.GnException {
	this(0, true);
	
	eventHandlerProxy = new IGnStatusEventsProxyU(pEventHandler);
	this.pEventHandler=pEventHandler;	// <REFERENCE_NAME_CHECK><TYPE>IGnStatusEvents</TYPE><NAME>pEventHandler</NAME></REFERENCE_NAME_CHECK> leave for scripted verification of names
	
	swigCPtr = gnsdk_javaJNI.new_GnSubmit__SWIG_1(GnUser.getCPtr(user), user);
}

  public static String version() {
    return gnsdk_javaJNI.GnSubmit_version();
  }

  public static String buildDate() {
    return gnsdk_javaJNI.GnSubmit_buildDate();
  }

  public GnAlbumEdit albumEditFromEmpty(long numTracks) throws com.gracenote.gnsdk.GnException {
    return new GnAlbumEdit(gnsdk_javaJNI.GnSubmit_albumEditFromEmpty(swigCPtr, this, numTracks), true);
  }

  public GnAlbumEdit albumEdit(GnAlbum album) throws com.gracenote.gnsdk.GnException {
    return new GnAlbumEdit(gnsdk_javaJNI.GnSubmit_albumEdit(swigCPtr, this, GnAlbum.getCPtr(album), album), true);
  }

  public GnAlbumEdit albumEditFromXml(String albumXml) throws com.gracenote.gnsdk.GnException {
    return new GnAlbumEdit(gnsdk_javaJNI.GnSubmit_albumEditFromXml(swigCPtr, this, albumXml), true);
  }

  public GnAlbumEdit albumEditFromCdToc(String cdtoc) throws com.gracenote.gnsdk.GnException {
    return new GnAlbumEdit(gnsdk_javaJNI.GnSubmit_albumEditFromCdToc(swigCPtr, this, cdtoc), true);
  }

  public boolean isAudioProcessNeeded(GnAlbum album, boolean bSubmitTestMode) throws com.gracenote.gnsdk.GnException {
    return gnsdk_javaJNI.GnSubmit_isAudioProcessNeeded(swigCPtr, this, GnAlbum.getCPtr(album), album, bSubmitTestMode);
  }

  public void audioProcessInit(GnTrack track, long audioRate, GnSubmitAudioFormat audioFormat, long audioChannels) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnSubmit_audioProcessInit(swigCPtr, this, GnTrack.getCPtr(track), track, audioRate, audioFormat.swigValue(), audioChannels);
  }

  public void audioSourceDetails(GnDataObject dataObject, GnSubmitFeatureSourceName name, GnSubmitFeatureSourceId id, GnSubmitFeatureSourceDescription desc, GnSubmitFeatureSourceBitRate bitrate, GnSubmitFeatureSourceBitRateType bitrate_type) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnSubmit_audioSourceDetails(swigCPtr, this, GnDataObject.getCPtr(dataObject), dataObject, name.swigValue(), id.swigValue(), desc.swigValue(), bitrate.swigValue(), bitrate_type.swigValue());
  }

  public boolean audioProcessWrite(GnTrack track, byte[] audioData, long audioData_bytes) throws com.gracenote.gnsdk.GnException {
    return gnsdk_javaJNI.GnSubmit_audioProcessWrite(swigCPtr, this, GnTrack.getCPtr(track), track, audioData, audioData_bytes);
  }

  public void audioProcessFinalize(GnTrack track, boolean bAborted) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnSubmit_audioProcessFinalize(swigCPtr, this, GnTrack.getCPtr(track), track, bAborted);
  }

  public void parcelAdd(GnDataObject dataObject) throws com.gracenote.gnsdk.GnException {
    gnsdk_javaJNI.GnSubmit_parcelAdd(swigCPtr, this, GnDataObject.getCPtr(dataObject), dataObject);
  }

  public GnSubmitState parcelUpload(boolean bSubmitTestMode) throws com.gracenote.gnsdk.GnException {
    return GnSubmitState.swigToEnum(gnsdk_javaJNI.GnSubmit_parcelUpload(swigCPtr, this, bSubmitTestMode));
  }

  public IGnStatusEvents eventHandler() {
	return pEventHandler;
}

  public void setCancel(boolean cancel) {
    gnsdk_javaJNI.GnSubmit_setCancel(swigCPtr, this, cancel);
  }

  public boolean isCancelled() {
    return gnsdk_javaJNI.GnSubmit_isCancelled(swigCPtr, this);
  }

}
